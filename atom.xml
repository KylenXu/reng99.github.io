<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Reng の Blog</title>
  
  <subtitle>If you don&#39;t think, then you shouldn&#39;t talk.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://reng99.cc/"/>
  <updated>2018-08-21T15:15:13.394Z</updated>
  <id>http://reng99.cc/</id>
  
  <author>
    <name>嘉明</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>部署静态站点</title>
    <link href="http://reng99.cc/2018/08/19/static-website-deploy/"/>
    <id>http://reng99.cc/2018/08/19/static-website-deploy/</id>
    <published>2018-08-19T14:17:06.000Z</published>
    <updated>2018-08-21T15:15:13.394Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/banner.jpg" alt="linux/static-website-deploy/banner"></p><blockquote><p>将静态资源部署到服务器上面</p></blockquote><a id="more"></a><p>本博文是在centOS系统上进行操作的，如图：</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/centOS-detail.png" alt="linux/static-website-deploy/centOS-detail"></p><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>从零开始讲解nginx的安装等内容…</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>为了证明我这是从零开始安装nginx的【全程在root下安装】，我特意卸载了之前安装的nginx<code>yum remove nginx</code>，查看nginx的版本就如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br><span class="line">bash: /usr/sbin/nginx: No such file or directory</span><br></pre></td></tr></table></figure><p>下面进行nginx的安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索，yum源没有nginx源</span></span><br><span class="line">yum search nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加CentOS 7 Nginx yum资源库</span></span><br><span class="line">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">sudo yum install -y nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nginx版本，这里打印出 nginx version: nginx/1.14.0</span></span><br><span class="line">nginx -v</span><br></pre></td></tr></table></figure><h3 id="nginx的几个默认目录"><a href="#nginx的几个默认目录" class="headerlink" title="nginx的几个默认目录"></a>nginx的几个默认目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><p>有待补充…</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><strong>1.启动nginx</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx start <span class="comment"># 会重定向到执行命令 systemctl start nginx.service</span></span><br><span class="line">Redirecting to /bin/systemctl start nginx.service</span><br></pre></td></tr></table></figure><p>启动nginx后，访问centos服务器的地址，你会看到下面的截图的内容，说明你已经安装成功!</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/nginx-install-successful.png" alt="linux/static-website-deploy/nginx-install-successful"></p><p><strong>2.停止nginx</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx stop <span class="comment"># 会重定向到执行命令 systemctl stop nginx.service</span></span><br><span class="line">Redirecting to /bin/systemctl stop nginx.service</span><br></pre></td></tr></table></figure><p><strong>3.查看nginx的状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx status <span class="comment"># 会重定向到执行命令systemctl status nginx.service</span></span><br><span class="line">Redirecting to /bin/systemctl status nginx.service</span><br></pre></td></tr></table></figure><p>未开启nginx时候查看状态显示的内容如下:</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/nginx-status-stop.png" alt="linux/static-website-deploy/nginx-status-stop"></p><p>开启nginx之后，查看状态时候显示如下：</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/nginx-status-start.png" alt="linux/static-website-deploy/nginx-status-start"></p><p><strong>4.重载nginx</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service nginx reload <span class="comment"># 会重定向到执行命令systemctl reload nginx.service</span></span><br><span class="line">Redirecting to /bin/systemctl reload nginx.service</span><br><span class="line"></span><br><span class="line">重载命令要在nginx已经启动的时候进行哦，不然会提示Job <span class="keyword">for</span> nginx.service invalid.</span><br></pre></td></tr></table></figure><h3 id="杀掉进程"><a href="#杀掉进程" class="headerlink" title="杀掉进程"></a>杀掉进程</h3><p><strong>1.相关nginx进行全部杀掉</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall -9 nginx</span><br></pre></td></tr></table></figure><p>刚开始安装nginx的时候，就遇到地址占用的情况，使用上面的命令顺利解决后重新启动nginx。</p><p> <img src="http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/address-in-use.png" alt="linux/static-website-deploy/address-in-use"></p><p><strong>2.把PID的两个进程杀掉</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 pidNum1 and <span class="built_in">kill</span> -9 pidNum2</span><br></pre></td></tr></table></figure><p>当然，这里需要你知道要<code>kill</code>掉那个<code>进程id</code>了，这里就不展开说了，有兴趣可以百度百科哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/banner.jpg&quot; alt=&quot;linux/static-website-deploy/banner&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将静态资源部署到服务器上面&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="linux" scheme="http://reng99.cc/categories/linux/"/>
    
    
      <category term="部署" scheme="http://reng99.cc/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>自适应布局</title>
    <link href="http://reng99.cc/2018/08/14/adaptability-layout/"/>
    <id>http://reng99.cc/2018/08/14/adaptability-layout/</id>
    <published>2018-08-14T11:14:48.000Z</published>
    <updated>2018-08-14T11:16:00.313Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有待补充</p></blockquote><a id="more"></a><blockquote><p>有待补充</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有待补充&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="http://reng99.cc/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>关于BFC理解</title>
    <link href="http://reng99.cc/2018/08/12/about-BFC/"/>
    <id>http://reng99.cc/2018/08/12/about-BFC/</id>
    <published>2018-08-12T04:19:10.000Z</published>
    <updated>2018-08-12T15:09:19.462Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/bfc/banner.jpg" alt="frontend/css/bfc/banner"></p><p>BFC(Block Formatting Context，块格式上下文)是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。对其的理解能够帮你更好的布局页面。</p><a id="more"></a><h2 id="常见的定位方案"><a href="#常见的定位方案" class="headerlink" title="常见的定位方案"></a>常见的定位方案</h2><p>在进入BFC话题前，先来捋一下常见的定位方案，定位方案是控制元素的布局，主要有三种常见的方案：</p><h3 id="普通流-正常文档流"><a href="#普通流-正常文档流" class="headerlink" title="普通流(正常文档流)"></a>普通流(正常文档流)</h3><p>在普通流中，元素按照其在HTML的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是流定位。也可以说，普通流中元素的位置由该元素在HTML文档中的位置决定。</p><p>额外：⚠️</p><p>HTML中，元素可以分成块级元素（block-level elements）和行内元素（inline-level elements）。具体的解析会另开一篇博文出来讲解。</p><p>下面给出普通流的一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>first<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>second<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo demo1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo demo2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo1</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo2</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/bfc/normal-flow.png" alt="frontend/css/bfc/normal-flow"></p><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>在浮动布局中，元素首先按照<strong>普通流</strong>的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果和印刷排版中的文本环绕相似。如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dotted red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/bfc/float-flow-img.png" alt="frontend/css/bfc/float-flow-img"></p><p>⚠️为什会内容环绕呢，而不是跟浮动元素重合呢？</p><p>《CSS权威指南》中指出，浮动的目的，最初只能用于图像，的就是为了允许其他内容（如文本）“围绕”该图像。而后来的CSS允许浮动任何元素。</p><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>在绝对定位布局中，元素会整体脱离普通流（浮动布局可以理解成脱离父元素文本流），因此绝对定位不会对其兄弟元素造成影响，而具体的位置由绝对定位的坐标决定。</p><h2 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h2><p>Formatting context（格式上下文）是W3C CSS2.1规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p><p>BFC即Block Formatting Content（块级格式上下文），它属于上述定位方案的<strong>普通流</strong>。具有BFC特性的元素可以看作是<strong>隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且BFC具有普通容器所没有的一些特性。</strong>后面介绍。</p><p>简单来说，可以把BFC理解成一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部的元素。</p><h2 id="触发BFC的条件"><a href="#触发BFC的条件" class="headerlink" title="触发BFC的条件"></a>触发BFC的条件</h2><p>下面的方式会创建<strong>块格式上下文</strong>：</p><ul><li>根元素或包含根元素的元素，这里我理解为body元素</li><li>浮动元素（元素的<code>float</code>不是<code>none</code>）</li><li>绝对定位元素（元素的<code>position</code>为<code>absolute</code>或<code>fixed</code>）</li><li>行内块元素（元素的<code>display</code>为<code>inline-block</code>）</li><li>表格单元格（元素的<code>display</code>为<code>table-cell</code>，html表格单元格默认为该值）</li><li>表格标题（元素的<code>display</code>为<code>table-caption</code>，html表格标题默认为该值）</li><li>匿名表格单元格元素（元素的<code>display</code>为<code>table</code>、<code>table-row</code>、<code>table-row-group</code>、<code>table-header-group</code>、<code>table-footer-group</code>（分别是html table、row、tbody、thead、tfoot的默认属性）或<code>inline-table</code>）</li><li><code>overflow</code>值不为visible的块元素</li><li><code>display</code>值为<code>flow-root</code>的元素</li><li><code>contain</code>值为<code>layout、content或strict</code>的元素</li><li>弹性元素（<code>display</code>为<code>flex</code>或<code>inline-flex</code>元素的直接子元素）</li><li>网格元素（<code>display</code>为<code>grid</code>或<code>inline-grip</code>元素的直接子元素）</li><li>多列容器（元素的<code>column-count</code>或<code>column-width</code>不为<code>auto</code>，包括<code>column-count</code>为1）</li><li><code>column-span</code>为<code>all</code>的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中</li></ul><p>创建了<strong>块格式上下文</strong>的元素中的所有内容都会被包含在BFC中。以上的创建方式参考自<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">块格式化上下文</a></p><h2 id="BFC的特性（作用）"><a href="#BFC的特性（作用）" class="headerlink" title="BFC的特性（作用）"></a>BFC的特性（作用）</h2><p>简单罗列下BFC的特性：</p><ol><li>内部的box会在垂直方向，从顶部开始一个接一个地放置</li><li>box<strong>垂直方向</strong>的距离由margin决定。属于同一个BFC的两个相邻的box的margin会发生叠加，结果值并集</li><li>在BFC中，每个盒子的左外边缘（margin-left）会触碰到容器的左边缘（border-left）。（对于从右到左的格式来说，则触碰到右边缘），即使是浮动也是如此。<strong>即不会发生margin穿透</strong>。</li><li>形成了BFC的区域不会与float box重叠（可阻止因浮动元素引发的文字环绕现象）</li><li>计算BFC高度时，浮动元素也参与计算（BFC会确切包含浮动的子元素，即闭合浮动）</li></ol><p>注意⚠️，对于第五点，原本浮动元素是应该脱离文档流的，但是BFC中会计算其高度。</p><h2 id="BFC的一些应用"><a href="#BFC的一些应用" class="headerlink" title="BFC的一些应用"></a>BFC的一些应用</h2><h3 id="实现自适应的两栏布局"><a href="#实现自适应的两栏布局" class="headerlink" title="实现自适应的两栏布局"></a>实现自适应的两栏布局</h3><p>应用了<strong>第四点BFC的区域不会与float box重叠</strong>的特性。一边浮动，另一边自适应的部分形成BFC，那么两者就不会重叠，避免了文字环绕及类似情形。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden; <span class="comment">/*把.right这个自适应的box变成BFC，避免与.left box这个有float属性的元素重叠*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/bfc/responsive-two-column.gif" alt="frontend/css/bfc/responsive-two-column"></p><h3 id="解决父元素高度塌陷"><a href="#解决父元素高度塌陷" class="headerlink" title="解决父元素高度塌陷"></a>解决父元素高度塌陷</h3><p>高度塌陷产生的原因：<strong>父元素未设置固定的高度，完全由子元素高度撑开；当子元素float之后脱离了文档流，父元素内部就没有支撑，造成了高度的塌陷</strong>。</p><p>解决这种问题我上之前的博文中有总结，地址请戳<a href="http://reng99.cc/2018/07/03/clear-float/">CSS清除浮动</a>。这里再简单的说下原理：</p><p>也就是用到了BFC的<strong>特性五：闭合内部浮动</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden; <span class="comment">/*形成BFC，使其能闭合浮动 box*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="margin重叠解决"><a href="#margin重叠解决" class="headerlink" title="margin重叠解决"></a>margin重叠解决</h3><p>在正常的文档流中，在垂直方向上兄弟box的margin会取交集（取最大的显示），为神马会出现这种情况呢？可以说是一种bug，也可以说是一种规范。我比较倾向于后者。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/bfc/margin-vertical-before.png" alt="frontend/css/bfc/margin-vertical-before"></p><p>上面出现的情况是BFC的<strong>特性三：属于同一个BFC的两个相邻的box的margin会发生叠加，结果值并集</strong>。那么，我们将他们隔离成不同的BFC不久解决问题了嘛。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'wrap'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden; <span class="comment">/*将.top box包含在另外一个BFC中隔离开*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/bfc/margin-vertical-after.png" alt="frontend/css/bfc/margin-vertical-after"></p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>使用好BFC能够是你更好的布局。文中部分内容参考网络内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/css/bfc/banner.jpg&quot; alt=&quot;frontend/css/bfc/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;BFC(Block Formatting Context，块格式上下文)是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。对其的理解能够帮你更好的布局页面。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="http://reng99.cc/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>固定页脚的方法</title>
    <link href="http://reng99.cc/2018/08/02/fixed-footer-methods/"/>
    <id>http://reng99.cc/2018/08/02/fixed-footer-methods/</id>
    <published>2018-08-02T12:37:18.000Z</published>
    <updated>2018-08-02T13:52:20.968Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/fixed-footer-methods/banner.jpg" alt="frontend/css/fixed-footer-methods/banner"></p><p>在页面的开发过程中，会遇到屏幕的内容比较少，那么如果按照传统的布局的话，页脚就会上移，造成页脚底部有空余的空间，很不是美观。那么，我们应该进行相关的处理，使得内容较少的时候，页脚是固定在页面的底部的。</p><a id="more"></a><p>下面针对存css和javascript与css结合给出下面的几种方法：</p><h2 id="使用margin-bottom为负数"><a href="#使用margin-bottom为负数" class="headerlink" title="使用margin-bottom为负数"></a>使用margin-bottom为负数</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">content</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;  </span><br><span class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">50px</span>; <span class="comment">/* 等于footer的高度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span>, <span class="selector-class">.push</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>div.wrapper的margin-bottom需要和div.footer的-height值一样，注意是负height</p><h2 id="将页脚的margin-top设为负数"><a href="#将页脚的margin-top设为负数" class="headerlink" title="将页脚的margin-top设为负数"></a>将页脚的margin-top设为负数</h2><p>给内容外增加父元素，并将内容部分的<code>padding-bottom</code>与页脚的<code>height</code>相等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-inside"</span>&gt;</span></span><br><span class="line">    content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content-inside</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用calc-计算"><a href="#使用calc-计算" class="headerlink" title="使用calc()计算"></a>使用calc()计算</h2><p><code>calc()</code>函数用于动态计算长度值。<a href="http://www.runoob.com/cssref/func-calc.html" target="_blank" rel="noopener">传送门</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="built_in">calc</span>(100vh - 70px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用flexbox弹性盒布局"><a href="#使用flexbox弹性盒布局" class="headerlink" title="使用flexbox弹性盒布局"></a>使用flexbox弹性盒布局</h2><p>上面的几种方法的<code>footer</code>高度都是固定的，如果其内容过多的话就会破坏布局的，比较友好的有以下的解决：flex和grid。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用grid网格布局"><a href="#使用grid网格布局" class="headerlink" title="使用grid网格布局"></a>使用grid网格布局</h2><p><code>display:grid</code>应该说是一个display的属性值，相关的知识点可以戳<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout" target="_blank" rel="noopener">这里</a>了解更多。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  content</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结合js和min-height"><a href="#结合js和min-height" class="headerlink" title="结合js和min-height"></a>结合js和min-height</h2><p>使用js进行页面的高度的获取，再减去底部的<code>footer</code>的高度，之后设置<code>min-height</code>就行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">content</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">html,body&#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">.footer&#123;</span><br><span class="line">height: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取浏览器的宽高</span></span><br><span class="line">    getClient() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            width: <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">            height: <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>后话</p></blockquote><p>部分内容参考网络，欢迎指正！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/css/fixed-footer-methods/banner.jpg&quot; alt=&quot;frontend/css/fixed-footer-methods/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;在页面的开发过程中，会遇到屏幕的内容比较少，那么如果按照传统的布局的话，页脚就会上移，造成页脚底部有空余的空间，很不是美观。那么，我们应该进行相关的处理，使得内容较少的时候，页脚是固定在页面的底部的。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="http://reng99.cc/tags/CSS/"/>
    
      <category term="javascript" scheme="http://reng99.cc/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>XSS攻击</title>
    <link href="http://reng99.cc/2018/07/24/xss-attack/"/>
    <id>http://reng99.cc/2018/07/24/xss-attack/</id>
    <published>2018-07-24T12:25:02.000Z</published>
    <updated>2018-07-25T15:33:48.545Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/security/xss/banner.jpg" alt="frontend/security/xss/banner"></p><p>XSS攻击全称<code>跨站脚本攻击</code>，是为不和层叠样式表（Cascading Style Sheet, CSS）的缩写混淆，故将跨站脚本攻击缩写为<code>XSS</code>。</p><a id="more"></a><blockquote><p>有待补充</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/security/xss/banner.jpg&quot; alt=&quot;frontend/security/xss/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;XSS攻击全称&lt;code&gt;跨站脚本攻击&lt;/code&gt;，是为不和层叠样式表（Cascading Style Sheet, CSS）的缩写混淆，故将跨站脚本攻击缩写为&lt;code&gt;XSS&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="安全" scheme="http://reng99.cc/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>重游广西阳朔</title>
    <link href="http://reng99.cc/2018/07/08/yangShuo-tourist-second/"/>
    <id>http://reng99.cc/2018/07/08/yangShuo-tourist-second/</id>
    <published>2018-07-08T14:22:02.000Z</published>
    <updated>2018-07-22T15:32:30.470Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/banner_img.jpg" alt="life/tourist/yangShuoSecond/banner_img"></p><p>时隔半年，周末(6.23-6.24)的时候又来到了阳朔，这次过来阳朔是团队FEers一起来的，人多又是不同的一次体验，而且还遇上了下雨天气，又是不一番的景象。多图预警哈，啦啦啦～</p><a id="more"></a><p>这次走的路线跟上次不一样，因为只有两天的时间并且加上是一堆的人过去，所以我们直接前往阳朔小镇了。去的当天早上是晴天，还庆幸没下雨（来时查了下天气预报说有雨），没想到下午就下起了大雨。但是，大雨也阻止不了我们逗比一行的乐趣–在一个下帐篷下都可以有说有笑的。</p><p>比较尴尬的是，我们是下午才开始竹筏游漓江，水真的是浑浊得一逼，还是比较喜欢一堆人电摩骑行的那个下午时段，很是放松😌</p><p>直接上图：</p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/team_img01.jpg" alt="life/tourist/yangShuoSecond/team_img01"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/team_img02.jpg" alt="life/tourist/yangShuoSecond/team_img02"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/girls_img01.png" alt="life/tourist/yangShuoSecond/girls_img01"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/scene_img01.png" alt="life/tourist/yangShuoSecond/scene_img01"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/team_img03.png" alt="life/tourist/yangShuoSecond/team_img03"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/about_me_img01.png" alt="life/tourist/yangShuoSecond/about_me_img01"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/scene_img02.png" alt="life/tourist/yangShuoSecond/scene_img02"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/team_img04.png" alt="life/tourist/yangShuoSecond/team_img04"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/scene_img03.png" alt="life/tourist/yangShuoSecond/scene_img03"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/bamboo_raft.png" alt="life/tourist/yangShuoSecond/bamboo_raft"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/scene_img04.png" alt="life/tourist/yangShuoSecond/scene_img04"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/about_me_img02.JPG" alt="life/tourist/yangShuoSecond/about_me_img02"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/about_me_img03.png" alt="life/tourist/yangShuoSecond/about_me_img03"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/scene_img05.png" alt="life/tourist/yangShuoSecond/scene_img05"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/scene_img06.png" alt="life/tourist/yangShuoSecond/scene_img06"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/scene_img07.png" alt="life/tourist/yangShuoSecond/scene_img07"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/about_me_img04.png" alt="life/tourist/yangShuoSecond/about_me_img04"></p><p>很是愉快的一次集体旅游，明年再去，估计我们下面三个人过去了，因为我在<code>芒果帮</code>留下我们三个人的名字了，哈哈哈～</p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/about_me_img05.png" alt="life/tourist/yangShuoSecond/about_me_img05"></p><p style="font-size:12px;text-align:center;">暴露了字丑的事实～～</p><p>有空明年见–阳朔 @～@</p><blockquote><p>后话</p></blockquote><p>爆团队人的照了，团队的人看到的话觉得图片放得不合适的话，告诉我哈。反正我是不会替换的啦～～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/banner_img.jpg&quot; alt=&quot;life/tourist/yangShuoSecond/banner_img&quot;&gt;&lt;/p&gt;
&lt;p&gt;时隔半年，周末(6.23-6.24)的时候又来到了阳朔，这次过来阳朔是团队FEers一起来的，人多又是不同的一次体验，而且还遇上了下雨天气，又是不一番的景象。多图预警哈，啦啦啦～&lt;/p&gt;
    
    </summary>
    
      <category term="诗和远方" scheme="http://reng99.cc/categories/%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9/"/>
    
    
      <category term="旅游" scheme="http://reng99.cc/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript糟粕部分</title>
    <link href="http://reng99.cc/2018/07/08/javascript-rubbishy-part/"/>
    <id>http://reng99.cc/2018/07/08/javascript-rubbishy-part/</id>
    <published>2018-07-08T02:55:04.000Z</published>
    <updated>2018-07-08T09:03:34.568Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/javascript/rubbishy/banner.jpg" alt="frontend/javascript/rubbishy/banner"></p><p>JavaScript是一门优秀的语言，但是难免存在着某些缺点，本博文主要说明下JavaScript的一些缺点。</p><a id="more"></a><h2 id=""><a href="#" class="headerlink" title="=="></a>==</h2><p>JavaScript有两组相等的运算符：<code>===和!==</code>，以及他们邪恶的孪生兄弟<code>==和!=</code>。<code>===和!==</code>运算符能够按照你期望的方式工作。如果两个<strong>运算数类型一致且拥有相同的值</strong>，那么<code>===</code>就返回true，<code>!==</code>返回false。但是<strong>==和!=</strong>只有在两个运算符类型一致时才会做出正确的判断，如果两个运算数是不同的类型，他们试图去强制转换值的类型。转换的规则复杂难以记忆。下面的一些有趣的例子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 传递性</span><br><span class="line">'0' == 0 # true</span><br><span class="line">0 == '' # true</span><br><span class="line">'' == '0' # false   为什么不是true呢</span><br><span class="line"></span><br><span class="line">false == 'false' # false</span><br><span class="line">false == 0 # true</span><br><span class="line"></span><br><span class="line">false == undefined # false</span><br><span class="line">false == null # false</span><br><span class="line">null == undefined # true</span><br><span class="line"></span><br><span class="line">'\t\r\n' == 0 # true</span><br></pre></td></tr></table></figure><p><code>==</code>运算符对<strong>传递性</strong>的缺乏值值得我们警惕。最好永远不要使用那对邪恶的孪生兄弟。相反的，请始终使用<code>===和!==</code>。如果上面的比较都是用<code>===</code>运算符，结果都是false，在编程中规定使用，很是受益。</p><p>⚠️传递性是一种编程约定。可以理解：对于任意的引用值x、y和z，如果x == y 和 y == z 为 ture，那么 x == z 为true。而JavaScript中的 == 运算符在某种特例上违背了传递性。</p><h2 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h2><p>JavaScript提供了一个with语句，本意是想使用它来快捷访问对象的属性。然而，它的结果可能有时不可预料，所以应该避免使用它。</p><p>下面的语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> (obj)&#123;</span><br><span class="line">a = b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和下面的代码做的是同样的事情：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj.a === <span class="literal">undefined</span>) &#123;</span><br><span class="line">a = obj.b === <span class="literal">undefined</span> ? b : obj.b;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">obj.a = obj.b === <span class="literal">undefined</span> ? b : obj.b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，它等于这些语句中的一条：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = b;</span><br><span class="line">a = obj.b;</span><br><span class="line">obj.a = b;</span><br><span class="line">obj.a = obj.b;</span><br></pre></td></tr></table></figure><p>通过阅读代码，你不可能辨别出你会得到的是这些语句的那一条。它可能随着程序运行到下一步时发生变化。它甚至可能在程序运行过程中就发生了变化。如果你不能通过阅读程序就了解它将做什么，你就无法确信它会正确地做你想要做的事情。</p><p>with语句在JavaScript中存在，本身就<strong>严重影响了JavaScript处理器的速度</strong>，因为它阻断了变量名的语法作用域绑定。它的本意是好的，但是如果没有它，JavaScript语言会更好一点。</p><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><p>eval函数传递了一个字符串给JavaScript编译器，并且执行其结果。它是一个被滥用的JavaScript特性。那些对JavaScript语言一知半解的人们最常用到它。例如你知道点表示法，但是不知道下标表示法，就可能会这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">"myValue = myObject."</span> + myKey + <span class="string">";"</span>);</span><br></pre></td></tr></table></figure><p>而不是这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvalue = myObject[myKey];</span><br></pre></td></tr></table></figure><p>使用eval形式的代码更加难以阅读。这种形式使得性能显著降低，因为它<strong>需要运行编译器</strong>，但也许只是为了执行一个微不足道的赋值语句。它也会让JSLint【⚠️JSLint是一个JavaScript语法检查器和校验器。】失效，让此工具检测问题的能力大打折扣。</p><p>eval函数还减弱了你的应用程序的安全性，带来XSS攻击，因为它被求值的文本授予了太多的权力。而且就像with语句执行的方式一样，它降低了语言的性能。</p><p>Function 构造器是eval的另一种形式，同样也应该避免使用它。</p><p>浏览器提供的setTimeout和setInterval函数，他们能够接受字符串参数或函数参数。当传递的是字符串参数时，setTimeout和setInterval会像eval那样去处理。同样也应该避免使用字符串参数形式。</p><h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h2><p>continue语句跳转到循环的顶部。可对代码重构后，性能会得到一定的改善，看下面的代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beginTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line"><span class="keyword">var</span> loop = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; loop ; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> endTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">console.log('耗费时间:'+ (endTime-beginTime)); # 58625</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beginTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line"><span class="keyword">var</span> loop = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; loop ; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> endTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">console.log('耗费时间:'+ (endTime-beginTime)); # 58471</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beginTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line"><span class="keyword">var</span> loop = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; loop ; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>) <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> endTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">console.log('耗费时间:'+ (endTime-beginTime)); # 56063</span><br></pre></td></tr></table></figure><h2 id="switch穿越"><a href="#switch穿越" class="headerlink" title="switch穿越"></a>switch穿越</h2><p>除非是明确中断流程，否则每次条件判断后都穿越到下一个case条件。在使用的时候要小心这种带刺的玫瑰，他们是有用的，也是危险的。</p><h2 id="缺少块的语句"><a href="#缺少块的语句" class="headerlink" title="缺少块的语句"></a>缺少块的语句</h2><p>If、while、do 或 for 语句可以接受一个括在花括号中的代码块，页可以接受单行语句。单行语句的形式是另一种带刺的玫瑰。它带来的好处是可以节省两个字节，但这是不是一个好处值得商榷。它模糊了程序的结构，使得在随后的操作代码中可能容易插入错误。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ok)</span><br><span class="line">t = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>可能变成:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ok)</span><br><span class="line">t = <span class="literal">true</span>;</span><br><span class="line">advance();</span><br></pre></td></tr></table></figure><p>它看起来就像要这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ok) &#123;</span><br><span class="line">t = <span class="literal">true</span>;</span><br><span class="line">advance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是实际上它的本意是这样的:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ok) &#123;</span><br><span class="line">t = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">advance();</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ok) &#123;</span><br><span class="line">t = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">advance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>貌似是在做一件事情，但实际上是在做另一件事的程序是很难理解清楚的。团队中制定严格的规范要求始终使用代码块是得代码更加容易理解。</p><h2 id="–"><a href="#–" class="headerlink" title="++ –"></a>++ –</h2><p>递增和递减运算符使得程序员可以用非常简洁的风格去编码。比如在C语言中，它们使得用一行代码实现字符串的复制成为可能：</p><p><code>for(p = src, q = dest; *p; p++, q++) *q = *p;</code></p><p>事实上，这两个运算符鼓励了一种不够严谨的编码风格。大多数的缓冲区溢出错误所造成的安全漏洞，都是由像这样编码而导致的。</p><p>当使用<code>++ 和 --</code>时，代码往往过于拥挤、复杂和隐晦。因此，作为一条原则，我不再使用它们。团队上也可以规范一波，那样我们的代码风格会变得更加整洁。</p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>JavaScript有着和Java相同的一套位运算符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&amp;and 按位与</span><br><span class="line">|or 按位或</span><br><span class="line">^xor 按位异或</span><br><span class="line">~not 按位非</span><br><span class="line">&gt;&gt;带符号的右移动</span><br><span class="line">&gt;&gt;&gt;无符号的（用0补足的）右移动</span><br><span class="line">&lt;&lt; 左位移</span><br></pre></td></tr></table></figure><p>在Java中，位运算符处理的是整数。JavaScript没有整数类型，它只有双精度的浮点数。因此，位操作符吧它们的数字运算数先转换成整数，接着执行运算，然后再转换回去。在大多数语言中，这些运算符接近于硬件处理，所以非常快。但JavaScript的执行环境一般接触不到硬件，所以非常慢。JavaScript很少被用来执行位操作。</p><h2 id="function语句对比function表达式"><a href="#function语句对比function表达式" class="headerlink" title="function语句对比function表达式"></a>function语句对比function表达式</h2><p>JavaScript既有function语句，同时也有function表达式。这令人困惑，因为它们看起来好像是相同的。一个function语句就是其值为一个函数的var语句的速记形式。</p><p>下面的语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>意思相当于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>第二种写法相对友好，因为它明确表示foo是一个包含一个函数值的<strong>变量</strong>。要学好JavaScript这门语言，理解<strong>函数就是数值</strong>是很重要的。</p><p>function语句在解析时会发生被提升的情况，这意味着不管function被放置在哪里，它会被移动到被定义时所在作用域<code>顶层</code>。这就放宽了函数必须先声明后使用的要求，这会导致混乱的。在if语句中使用<code>function语句</code>也是被禁止的。结果表明大多数的浏览器都允许在if语句里使用function语句，但是它们在解析的时候处理上各不相同。这就造成了可移植性的问题。</p><p>一个语句不能以一个函数表达式开头，因为官方的语法假定以单词<code>function</code>开头的语句是一个<code>function</code>语句。解决的方法就是把函数调用括在一个圆括号中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> hidden_variable;</span><br><span class="line"></span><br><span class="line"># 这个函数可能对环境有一些影响，但是不会映入新的全局变量</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="类型的包装对象"><a href="#类型的包装对象" class="headerlink" title="类型的包装对象"></a>类型的包装对象</h2><p>JavaScript有一套类型的包装对象。例如：</p><p><code>new Boolean(false)</code></p><p>会返回一个对象，该对象有一个valueOf方法会返回被包装的值。这其实完全没有必要，并且有时还令人困惑。不要使用<code>new Boolean、new Number 或 new String</code>。</p><p>此外，页应该避免使用<code>new Object 和 new Array</code>。可使用<code>{} 和 []</code>来替代。</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><p>JavaScript的new运算符创建了一个继承于其运算符的原型的新对象，然后调用该运算数，把新创建的对象绑定给this。这给运算数（它应该是一个构造函数）一个机会在返回给请求者自定义新创建对象。</p><p>如果忘记了使用此<code>new运算符</code>，你得到的就是一个普通的函数调用，并且this被绑定到全局对象，而不是新创建的对象。者意味着当你的函数尝试去初始化新成员属性时它将会污染全局变量。这是一件非常糟糕的事情。而且既没有编译时警告，也没有运行时警告。</p><p>按照惯例，<strong>打算与new结合使用的函数应该以首字母大写的形式命名</strong>，并且首字母大写的形式应该只用来命名那些构造器函数。这个约定帮助我们进行区分，便于我们发现那些Javascript语言自身经常忽略但是却带来昂贵代价的错误。</p><p>一个更好的应对方法策略是根本不去使用new。幻想下就行啦～</p><h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><p>在很多语言中，void 是一种类型，表示没有值（空值）。<code>而在JavaScript中，void是一个运算符</code>，它接受一个运算数并且返回undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   a = <span class="keyword">void</span> ( a = <span class="number">90</span> );</span><br><span class="line">   document.write('a = ' + a); # a = undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这并没有什么用，而且令人非常困惑。应该避免使用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《JavaScript语言精粹》Douglas Crockford著 赵泽欣 鄢学鹍 译</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/javascript/rubbishy/banner.jpg&quot; alt=&quot;frontend/javascript/rubbishy/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;JavaScript是一门优秀的语言，但是难免存在着某些缺点，本博文主要说明下JavaScript的一些缺点。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="http://reng99.cc/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS清除浮动</title>
    <link href="http://reng99.cc/2018/07/03/clear-float/"/>
    <id>http://reng99.cc/2018/07/03/clear-float/</id>
    <published>2018-07-03T04:59:16.000Z</published>
    <updated>2018-08-02T12:40:41.238Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/banner.jpg" alt="frontend/css/clear-float/banner"></p><p>浮动对页面的影响：如果一个父盒子中有一个子盒子，并且子盒子没有设置高，子盒子在父盒子中进行浮动，那么将来父盒子的高度为0，由于父盒子的高度为0，下面的元素会自动补位，所以这个时候有必要进行浮动的清除。</p><a id="more"></a><p>下面代码来掩饰如何清除浮动：</p><p>原代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>清除浮动的方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">height: 100px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.blue</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">background: blue;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.other</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="undefined">height: 30px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span><span class="selector-pseudo">:yellow</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"other"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原效果：</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/origin_clear_float.png" alt="frontend/css/clear-float/origin_clear_float"></p><p>为红色和绿色方块添加左浮动后</p><p>原代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>清除浮动的方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">height: 100px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.blue</span>&#123;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">background: blue;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.other</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="undefined">height: 30px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span><span class="selector-pseudo">:yellow</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"other"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其效果为–</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/float_left.png" alt="frontend/css/clear-float/float_left"></p><h2 id="方法一：使用overflow属性来清除浮动"><a href="#方法一：使用overflow属性来清除浮动" class="headerlink" title="方法一：使用overflow属性来清除浮动"></a>方法一：使用overflow属性来清除浮动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.outer&#123;</span><br><span class="line">    overflow:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先找到浮动盒子的父元素（盒子），在父元素中田间一个属性<code>overflow:hidden</code>，就是清除这个父元素中的子元素浮动对页面的影响。</p><p>效果如下：</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/after_clear_float_method1.png" alt="frontend/css/clear-float/after_clear_float_method1"></p><p><strong>注意：</strong>一般情况下不会使用这种方式，因为<code>overfloat:hidden</code>有一个特点，离开了这个元素所在的区域之后会被隐藏（overflow:hidden会将超出的部分隐藏起来）。</p><h2 id="方法二：使用额外的标签"><a href="#方法二：使用额外的标签" class="headerlink" title="方法二：使用额外的标签"></a>方法二：使用额外的标签</h2><p>这又分两种情况–</p><h3 id="内部标签"><a href="#内部标签" class="headerlink" title="内部标签"></a>内部标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear:both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"other"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>放在浮动元素的父元素里面，效果如下图：</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/after_clear_float_method1.png" alt="frontend/css/clear-float/after_clear_float_method1"></p><h3 id="外部标签"><a href="#外部标签" class="headerlink" title="外部标签"></a>外部标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear:both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"other"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>放在浮动元素父元素同级位置，最终效果如下：</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/after_clear_float_method2.png" alt="frontend/css/clear-float/after_clear_float_method2"></p><p>这两种种清除的方式有下面的特点：</p><p>1.内部标签：会将这个浮动盒子的父盒子的高度重新撑开</p><p>2.外部标签：会将这个浮动盒子的影响清除，但是不会撑开父盒子。</p><p><strong>注意：</strong>⚠️一般情况下不会使用这种方式来清除浮动。因为这种清除浮动方式会增加页面的标签，造成机构混乱。</p><h2 id="方法三：使用伪元素-after"><a href="#方法三：使用伪元素-after" class="headerlink" title="方法三：使用伪元素:after"></a>方法三：使用伪元素:after</h2><p>outer利用其伪类<code>clear:after</code>在元素内部增加一个类似div.clear的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.outer &#123; /*==for IE6/7 Maxthon2  为了兼容IE==*/</span><br><span class="line">        zoom:1;</span><br><span class="line">    &#125;  </span><br><span class="line">.outer:after&#123;</span><br><span class="line">content:"."; /*可以取值，也可以为空*/</span><br><span class="line">clear:both;</span><br><span class="line">display: block;</span><br><span class="line">width:0;</span><br><span class="line">height: 0;</span><br><span class="line">visibility: hidden;／*visibility:hidden;的作用是允许浏览器渲染它，但是不显示出来*／</span><br><span class="line"></span><br><span class="line">　　　　　&#125;</span><br></pre></td></tr></table></figure><p>这是网上使用比较广泛，拉风的清除方式。</p><p>其效果如下：</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/after_clear_float_method1.png" alt="frontend/css/clear-float/after_clear_float_method1"></p><h2 id="方法四：使用双伪元素清除浮动"><a href="#方法四：使用双伪元素清除浮动" class="headerlink" title="方法四：使用双伪元素清除浮动"></a>方法四：使用双伪元素清除浮动</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.outer &#123; /*==for IE6/7 Maxthon2  为了兼容IE==*/</span><br><span class="line">        zoom:1;</span><br><span class="line">    &#125;  </span><br><span class="line">.outer:after,.outer:before&#123;</span><br><span class="line">content:"."; /*取值只能为空*/</span><br><span class="line">clear:both;</span><br><span class="line">display: block;</span><br><span class="line">　　　　　&#125;</span><br></pre></td></tr></table></figure><p>其效果如下：</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/after_clear_float_method1.png" alt="frontend/css/clear-float/after_clear_float_method1"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>第一种方法会将超出部分隐藏，在某些时候我们想清除浮动并且保留超出部分的时候做不到。</p><p>第二种方法会增加不必要的标签。</p><p>所以我们选择第三种方法来清除浮动。</p><p>为什么不选择第四种来清除呢？因为第四种是第三种的改良版，虽然比较简便，但是不够严谨，比如<code>content</code>的内容不为空的时候，会出现问题，感兴趣的话可以自行尝试下咯。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/banner.jpg&quot; alt=&quot;frontend/css/clear-float/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;浮动对页面的影响：如果一个父盒子中有一个子盒子，并且子盒子没有设置高，子盒子在父盒子中进行浮动，那么将来父盒子的高度为0，由于父盒子的高度为0，下面的元素会自动补位，所以这个时候有必要进行浮动的清除。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="http://reng99.cc/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>散列</title>
    <link href="http://reng99.cc/2018/06/18/algorithm-hash/"/>
    <id>http://reng99.cc/2018/06/18/algorithm-hash/</id>
    <published>2018-06-18T10:00:48.000Z</published>
    <updated>2018-08-13T15:40:41.716Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/algorithm/hash/banner.jpg" alt="algorithm/hash/banner"></p><p>散列是一种常用的数据存储技术，散列后的数据可以进行快速地插入或取用。散列使用的数据结构叫做散列表（hash table, 也叫哈希表）。在散列表中<strong>插入、删除和取用数据</strong>都非常快，但是对于查找操作来说却效率低下，比如查找一组数据中的最大或者最小值。</p><a id="more"></a><blockquote><p>散列算法的作用是尽可能快地在数据结构中找到一个值。在前面几个博文中提到的数据结构，我门如果在数据结构中获取一个值（使用get方法），需要遍历整个数据库来找到它。如果使用散列函数，就知道值的具体位置，因此你能够快速检索到该值。散列函数的作用是给定一个键值，然后返回值在表中的地址。</p></blockquote><p>见下图的例子（散列函数这里取ascii值相加-电子邮件地址薄）：</p><p><img src="http://omu538iq8.bkt.clouddn.com/algorithm/hash/email-demo.png" alt="algorithm/hash/email-demo"></p><h2 id="创建一个散列表"><a href="#创建一个散列表" class="headerlink" title="创建一个散列表"></a>创建一个散列表</h2><p>搭建散列表类如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> table = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的散列函数如下（取上图的ascii值）:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> loseloseHashCode = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++)&#123;</span><br><span class="line">hash += key.charCodeAt(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本完整代码"><a href="#基本完整代码" class="headerlink" title="基本完整代码"></a>基本完整代码</h2><p>hash表的简单demo的基本完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> loseloseHashCode = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++)&#123;</span><br><span class="line">hash += key.charCodeAt(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> table = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向散列表中增加一个新的项（也能更新散列表）</span></span><br><span class="line"><span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span>(<span class="params">key , value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line"><span class="built_in">console</span>.log(position + <span class="string">' - '</span> + key);</span><br><span class="line">table[position] = value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回检索到的特定的值</span></span><br><span class="line"><span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> table[loseloseHashCode(key)];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据键值从散列表中移除值</span></span><br><span class="line"><span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">table[loseloseHashCode(key)] = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的简单的完整代码中，展示了hash的思想，但是，发生冲突，又该怎么解决呢？</p><h2 id="处理冲突"><a href="#处理冲突" class="headerlink" title="处理冲突"></a>处理冲突</h2><p>介绍处理数据位置相同，覆盖之前数据方法。这里用到之前学习的数据结构，感兴趣的人儿请自动前翻。</p><h3 id="分离链接"><a href="#分离链接" class="headerlink" title="分离链接"></a>分离链接</h3><p>分离链接法包括为散列表的每一个位置创建一个链表并将元素存储在里面。他是解决冲突的最简单的方法，但是它在HashTable实例之外还需要额外的存储空间。</p><p>使用到之前说到的链表。分离链接的具体代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们需要一个辅助类来表示将要加入LinkedList实例的元素，这里我们称ValuePair</span></span><br><span class="line"><span class="keyword">var</span> ValuePair = <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.key = key;</span><br><span class="line"><span class="keyword">this</span>.value =  value;</span><br><span class="line"><span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`[<span class="subst">$&#123;<span class="keyword">this</span>.key&#125;</span> - <span class="subst">$&#123;<span class="keyword">this</span>.value&#125;</span>]`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//put 方法</span></span><br><span class="line"><span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line"><span class="keyword">if</span>(table[position] == <span class="literal">undefined</span>)&#123;</span><br><span class="line">table[position] = <span class="keyword">new</span> LinkedList();</span><br><span class="line">&#125;</span><br><span class="line">table[position].append(<span class="keyword">new</span> ValuePair(key,value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get 方法</span></span><br><span class="line"><span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line"><span class="keyword">if</span>(table[position] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line"><span class="comment">// 遍历链表来寻找键/值</span></span><br><span class="line"><span class="keyword">var</span> current = table[position].getHead();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(current.next)&#123;</span><br><span class="line"><span class="keyword">if</span>(current.element.key === key)&#123;</span><br><span class="line"><span class="keyword">return</span> current.element.value;</span><br><span class="line">&#125;</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查元素在链表第一个或最后一个节点的情况</span></span><br><span class="line"><span class="keyword">if</span>(current.element.key === key)&#123;</span><br><span class="line"><span class="keyword">return</span> current.element.value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove 方法</span></span><br><span class="line"><span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line"><span class="keyword">if</span>(table[position] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> current = table[position].getHead();</span><br><span class="line"><span class="keyword">while</span>(current.next)&#123;</span><br><span class="line"><span class="keyword">if</span>(current.element.key === key)&#123;</span><br><span class="line">table[position].remove(current.element);</span><br><span class="line"><span class="keyword">if</span>(table[position].isEmpty())&#123;</span><br><span class="line">table[position] = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否为第一个或最后一个元素</span></span><br><span class="line"><span class="keyword">if</span>(current.element.key === key)&#123;</span><br><span class="line">table[position].remove(current.element);</span><br><span class="line"><span class="keyword">if</span>(table[position].isEmpty())&#123;</span><br><span class="line">table[position] = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性探查"><a href="#线性探查" class="headerlink" title="线性探查"></a>线性探查</h3><p>当想向表中某个位置加入一个新元素的时候，如果索引为index的位置被占据了，就尝试index+1的位置。如果index+1的位置也被占用了，就尝试index+2的位置，以此类推。</p><p>相关的方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// put 方法</span></span><br><span class="line"><span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line"><span class="keyword">if</span>(table[position] == <span class="literal">undefined</span>)&#123;</span><br><span class="line">table[position] = <span class="keyword">new</span> ValuePair(key,value);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">var</span> index = ++position;</span><br><span class="line"><span class="keyword">while</span>(table[index]!=<span class="literal">undefined</span>)&#123;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">table[index] = <span class="keyword">new</span> ValuePair(key,value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get 方法</span></span><br><span class="line"><span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line"><span class="keyword">if</span>(table[position] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(table[position].key === key)&#123;</span><br><span class="line"><span class="keyword">return</span> table[position].value;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> index = ++position;</span><br><span class="line"><span class="keyword">while</span>(table[index] === <span class="literal">undefined</span> || table[index].key !== key)&#123;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(table[index].key === key)&#123;</span><br><span class="line"><span class="keyword">return</span> table[index].value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove 方法</span></span><br><span class="line"><span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line"><span class="keyword">if</span>(table[position] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(table[position].key === key)&#123;</span><br><span class="line">table[index] = <span class="literal">undefined</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> index = ++position;</span><br><span class="line"><span class="keyword">while</span>(table[index] === <span class="literal">undefined</span> || table[index].key !== key)&#123;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(table[index].key === key)&#123;</span><br><span class="line">table[index] = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：详细内容请前往《javascript数据结构与算法》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/algorithm/hash/banner.jpg&quot; alt=&quot;algorithm/hash/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;散列是一种常用的数据存储技术，散列后的数据可以进行快速地插入或取用。散列使用的数据结构叫做散列表（hash table, 也叫哈希表）。在散列表中&lt;strong&gt;插入、删除和取用数据&lt;/strong&gt;都非常快，但是对于查找操作来说却效率低下，比如查找一组数据中的最大或者最小值。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://reng99.cc/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="散列" scheme="http://reng99.cc/tags/%E6%95%A3%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>字典</title>
    <link href="http://reng99.cc/2018/06/18/algorithm-dictionary/"/>
    <id>http://reng99.cc/2018/06/18/algorithm-dictionary/</id>
    <published>2018-06-18T05:08:26.000Z</published>
    <updated>2018-06-18T09:44:26.841Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/algorithm/dictionary/banner.jpg" alt="algorithm/dictionary/banner"></p><p>在字典中，存储的是[键,值]对，其中键名是用来查询特定元素的。字典和之前介绍的<a href="http://reng99.cc/2018/06/18/algorithm-set/">集合</a>很相似，集合以[值,值]的形式存储元素，字典则是以[键,值]的形式来存储元素。字典也称做映射。</p><a id="more"></a><h2 id="字典类"><a href="#字典类" class="headerlink" title="字典类"></a>字典类</h2><p>字典类和之前介绍的集合类一样，基本的骨架如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dictionary</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> items = &#123;&#125;; <span class="comment">// 存放数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>因为其和集合很是相似，部分的代码可以使用集合的代码，比如清空字典，字典的大小等等。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dictionary</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> items = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否存在键-值</span></span><br><span class="line"><span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value <span class="keyword">in</span> items;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 也可以是使用hasOwmProperty来实现</span></span><br><span class="line"><span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.hasOwnProperty(value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置新元素</span></span><br><span class="line"><span class="keyword">this</span>.set = <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line">items[key] = value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示字典的数据</span></span><br><span class="line"><span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 临时存放数据</span></span><br><span class="line"><span class="keyword">var</span> values = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> items)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.has(k))&#123;</span><br><span class="line">values.push(items[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> values;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除元素</span></span><br><span class="line"><span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.has(key))&#123;</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">delete</span> items[key];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取特定的项</span></span><br><span class="line"><span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.has(key) ? items[key] : <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空集合中所有值</span></span><br><span class="line"><span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">items = &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取集合的数量</span></span><br><span class="line"><span class="comment">// 下面的实现是在现代浏览器才能使用，当然借助babel可以转换成所有浏览器识别的代码</span></span><br><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.keys(items).length;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 所有浏览器都可以运行</span></span><br><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> items)&#123;</span><br><span class="line"><span class="keyword">if</span>(items.hasOwnProperty(prop))&#123;</span><br><span class="line">++count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多的代码请查看<a href="https://github.com/reng99/algorithm" target="_blank" rel="noopener">https://github.com/reng99/algorithm</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/algorithm/dictionary/banner.jpg&quot; alt=&quot;algorithm/dictionary/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;在字典中，存储的是[键,值]对，其中键名是用来查询特定元素的。字典和之前介绍的&lt;a href=&quot;http://reng99.cc/2018/06/18/algorithm-set/&quot;&gt;集合&lt;/a&gt;很相似，集合以[值,值]的形式存储元素，字典则是以[键,值]的形式来存储元素。字典也称做映射。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://reng99.cc/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="字典" scheme="http://reng99.cc/tags/%E5%AD%97%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="http://reng99.cc/2018/06/18/algorithm-set/"/>
    <id>http://reng99.cc/2018/06/18/algorithm-set/</id>
    <published>2018-06-18T01:58:38.000Z</published>
    <updated>2018-06-18T04:17:14.496Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/algorithm/set/set-banner.jpg" alt="algorithm/set/set-banner"></p><p>集合(Set)是一种包含不同元素的数据结构。集合中的元素称为成员，集合的两个最重要的特性是：首先，集合中的成员是无序的；其次，集合中不允许相同成员的存在。</p><a id="more"></a><h2 id="集合的定义"><a href="#集合的定义" class="headerlink" title="集合的定义"></a>集合的定义</h2><ul><li>不包含任何成员的集合称为空集{}，全集则是包含一切可能成员的集合。</li><li>如何两个集合的成员完全相同，则称两个集合相等。</li><li>如果一个集合中所有的成员都属于另外一个集合，则前一集合称为后一个集合的子集。</li></ul><h2 id="集合的操作"><a href="#集合的操作" class="headerlink" title="集合的操作"></a>集合的操作</h2><p>对集合的操作基本是下面三种：</p><ol><li>并集: 将两个集合中的成员进行合并，得到一个新的集合。</li><li>交集: 两集合中共同存在的成员组成一个新的集合。</li><li>差集: 属于一个集合而不属于另一个集合的成员组成的集合。</li><li>子集: 验证一个给定集合是否是另一个集合的子集。</li></ol><h2 id="创建集合类"><a href="#创建集合类" class="headerlink" title="创建集合类"></a>创建集合类</h2><p>这里还是使用构造函数进行创建集合类:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// some code here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们将使用对象来表示集合<code>var items = {}</code>，集合的键-值是相同的。当然，你也可以使用数组来表示，但是不够直观。而使用对象一个好处是，javascript的对象不允许一个键指向两个不同的属性，保证了集合里的元素都是唯一性的。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>基本的完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 选择对象而不是数组来表示集合</span></span><br><span class="line"><span class="keyword">var</span> items = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否存在键-值</span></span><br><span class="line"><span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value <span class="keyword">in</span> items;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 也可以是使用hasOwmProperty来实现</span></span><br><span class="line"><span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.hasOwnProperty(value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line"><span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.has(value))&#123;</span><br><span class="line">items[value] = value;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取items对象，返回所有属性，以数组形式返回</span></span><br><span class="line"><span class="comment">// 下面的实现是在现代浏览器才能使用，当然借助babel可以转换成所有浏览器识别的代码</span></span><br><span class="line"><span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.keys(items);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 下面的实现在任何浏览器上可以运行</span></span><br><span class="line"><span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> keys = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> items)&#123;</span><br><span class="line">keys.push(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> keys;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除一个元素</span></span><br><span class="line"><span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.has(value))&#123;</span><br><span class="line"><span class="keyword">delete</span> items[value];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空集合中所有值</span></span><br><span class="line"><span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">items = &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取集合的数量</span></span><br><span class="line"><span class="comment">// 下面的实现是在现代浏览器才能使用，当然借助babel可以转换成所有浏览器识别的代码</span></span><br><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.keys(items).length;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 所有浏览器都可以运行</span></span><br><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> items)&#123;</span><br><span class="line"><span class="keyword">if</span>(items.hasOwnProperty(prop))&#123;</span><br><span class="line">++count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">this</span>.union = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 定义一个并集</span></span><br><span class="line"><span class="keyword">var</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本集合对象</span></span><br><span class="line"><span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line">unionSet.add(values[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已知的另外一个集合对象</span></span><br><span class="line">values = otherSet.values();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; values.length; i++)&#123;</span><br><span class="line">unionSet.add(values[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> unionSet;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">this</span>.intersection = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 定义一个交集</span></span><br><span class="line"><span class="keyword">var</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(otherSet.has(values[i]))&#123;</span><br><span class="line">intersectionSet.add(values[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> intersectionSet;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">this</span>.difference = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 定义一个差集</span></span><br><span class="line"><span class="keyword">var</span> differenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!otherSet.has(values[i]))&#123;</span><br><span class="line">differenceSet.add(values[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> differenceSet;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子集</span></span><br><span class="line"><span class="keyword">this</span>.subset = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 如果个数越界肯定不是子集了</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.size() &gt; otherSet.size())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length ; i++)&#123;</span><br><span class="line"><span class="comment">// 只要有一个元素不再另外的集合里面，则不是子集</span></span><br><span class="line"><span class="keyword">if</span>(!otherSet.has(values[i]))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多的代码请查看<a href="https://github.com/reng99/algorithm" target="_blank" rel="noopener">https://github.com/reng99/algorithm</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/algorithm/set/set-banner.jpg&quot; alt=&quot;algorithm/set/set-banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;集合(Set)是一种包含不同元素的数据结构。集合中的元素称为成员，集合的两个最重要的特性是：首先，集合中的成员是无序的；其次，集合中不允许相同成员的存在。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://reng99.cc/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="集合" scheme="http://reng99.cc/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="http://reng99.cc/2018/06/17/algorithm-linked-list/"/>
    <id>http://reng99.cc/2018/06/17/algorithm-linked-list/</id>
    <published>2018-06-17T09:15:48.000Z</published>
    <updated>2018-06-17T15:43:39.028Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/algorithm/linked-list/banner.jpg" alt="algorithm/linked-list/banner"></p><p>链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称为指针或链接，通常叫指针）组成。自己无聊的时候还翻译一点维基百科上的<a href="http://reng99.cc/2018/05/29/linked-list/">链表的介绍</a>。</p><a id="more"></a><h2 id="数组的缺点"><a href="#数组的缺点" class="headerlink" title="数组的缺点"></a>数组的缺点</h2><p>在<code>栈和队列</code>数据结构中，存储数据我们是使用了数组的形式。但是，数组不总是组织数据的最佳的结构。原因如下：</p><ol><li>数组被实现成对象，与其他语言（比如C++和Java）的数组相比，效率很低。【主要原因】</li><li>数组的长度是固定的，所以当数组已被数据填满的时，再要加入新的元素会非常困难。</li><li>从数组的起点或中间插入或移除项的成本很高。虽然<code>splice</code>等方法能帮方便的实现，但是背后的原理还是需要移动元素。</li></ol><p>所以，当数组的代价高的时候，需要考虑其他的数据结构，比如现在要说的链表。</p><h2 id="创建链表类"><a href="#创建链表类" class="headerlink" title="创建链表类"></a>创建链表类</h2><p>通过一个构造函数创建链表类:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// somecode here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>节点数据也是使用一个类进行存放，这里我们叫做Node类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.element = element;</span><br><span class="line"><span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>链表的基本的完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 辅助类</span></span><br><span class="line"><span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.element = element; <span class="comment">// 存放数据</span></span><br><span class="line"><span class="keyword">this</span>.next = <span class="literal">null</span>; <span class="comment">// 存放指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表的长度</span></span><br><span class="line"><span class="keyword">var</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化头指针为空</span></span><br><span class="line"><span class="keyword">var</span> head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向链表尾部追加元素</span></span><br><span class="line"><span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 创建一个node节点</span></span><br><span class="line"><span class="keyword">var</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">current; <span class="comment">// 当前的指向节点/元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">null</span>)&#123; <span class="comment">// 列表中的第一个节点</span></span><br><span class="line">head = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">current = head;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环列表，直到找到最后一项</span></span><br><span class="line"><span class="keyword">while</span>(current.next)&#123;</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到追后一项，将next赋值为node，建立链接</span></span><br><span class="line">current.next = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新链表的长度</span></span><br><span class="line">length++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从链表中移除元素,通过指定位置移除</span></span><br><span class="line"><span class="keyword">this</span>.removeAt = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 检查指定移除的position是否越界</span></span><br><span class="line"><span class="keyword">if</span>(position &gt; <span class="number">-1</span> &amp;&amp; position &lt; length)&#123; <span class="comment">// 未越界</span></span><br><span class="line"><span class="keyword">var</span> current = head, <span class="comment">// 当前元素指向头节点</span></span><br><span class="line"> previous, <span class="comment">// 上一个节点</span></span><br><span class="line"> index = <span class="number">0</span>; <span class="comment">// 节点的索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除第一项</span></span><br><span class="line"><span class="keyword">if</span>(position == <span class="number">0</span>)&#123;</span><br><span class="line">head = current.next;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span> (index++ <span class="xml"><span class="tag">&lt; <span class="attr">position</span>)&#123;</span></span></span><br><span class="line"><span class="xml">previous = current;</span></span><br><span class="line"><span class="xml">current = current.next;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 将previous与current的下一项链接起来：跳过current，从而移除它</span></span><br><span class="line"><span class="xml">previous.next = current.next;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 链表长度减一</span></span><br><span class="line"><span class="xml">length--;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 返回删除的元素</span></span><br><span class="line"><span class="xml">return current.element;</span></span><br><span class="line"><span class="xml">&#125;else&#123;</span></span><br><span class="line"><span class="xml">// position越界的情况</span></span><br><span class="line"><span class="xml">return null;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 任意位置插入一个元素</span></span><br><span class="line"><span class="xml">this.insert = function(position , element)&#123;</span></span><br><span class="line"><span class="xml">// 检查position是否越界</span></span><br><span class="line"><span class="xml">if(position &gt;= 0 &amp;&amp; position <span class="tag">&lt;<span class="name">=length)&#123;</span></span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">var node = new Node(element), // 新建一个节点</span></span><br><span class="line"><span class="xml">current = head, // 初始当前节点指向头节点</span></span><br><span class="line"><span class="xml">previous, // 前一个节点</span></span><br><span class="line"><span class="xml">index = 0; // 默认索引从第一个开始</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">if(position == 0)&#123; // 在第一个位置添加元素</span></span><br><span class="line"><span class="xml">node.next = current;</span></span><br><span class="line"><span class="xml">head = node;</span></span><br><span class="line"><span class="xml">&#125; else &#123;</span></span><br><span class="line"><span class="xml">while(index++ <span class="tag">&lt; <span class="attr">position</span>)&#123;</span></span></span><br><span class="line"><span class="xml">previous = current;</span></span><br><span class="line"><span class="xml">current = current.next;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">node.next = current;</span></span><br><span class="line"><span class="xml">previous.next = node;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 更新列表长度</span></span><br><span class="line"><span class="xml">length++;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">return true;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&#125; else&#123;</span></span><br><span class="line"><span class="xml">// position越界</span></span><br><span class="line"><span class="xml">return false;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 将LinkedList对象转换成一个字符串</span></span><br><span class="line"><span class="xml">this.toString = function() &#123;</span></span><br><span class="line"><span class="xml">var current = head,</span></span><br><span class="line"><span class="xml"> string = '';</span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml">while(current)&#123;</span></span><br><span class="line"><span class="xml">string += current.element;</span></span><br><span class="line"><span class="xml">current = current.next;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">return string;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 查找元素在链表中的位置</span></span><br><span class="line"><span class="xml">this.indexOf = function(element) &#123;</span></span><br><span class="line"><span class="xml">var current = head;</span></span><br><span class="line"><span class="xml">index = 0;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">while(current)&#123;</span></span><br><span class="line"><span class="xml">if(element == current.element) &#123;</span></span><br><span class="line"><span class="xml">return index;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">index++;</span></span><br><span class="line"><span class="xml">current = current.next;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 找不到元素</span></span><br><span class="line"><span class="xml">return -1;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 链表中移除元素，通过指定移除的元素</span></span><br><span class="line"><span class="xml">this.remove = function(element) &#123;</span></span><br><span class="line"><span class="xml">var index = this.indexOf(element);</span></span><br><span class="line"><span class="xml">return this.removeAt(index);</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 检查链表是否为空</span></span><br><span class="line"><span class="xml">this.isEmpty = function() &#123;</span></span><br><span class="line"><span class="xml">return length == 0;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 获取链表的长度</span></span><br><span class="line"><span class="xml">this.size = function() &#123;</span></span><br><span class="line"><span class="xml">return length;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 获取链表的头节点</span></span><br><span class="line"><span class="xml">this.getHead = function() &#123;</span></span><br><span class="line"><span class="xml">return head;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>更多的代码请查看<a href="https://github.com/reng99/algorithm" target="_blank" rel="noopener">https://github.com/reng99/algorithm</a>。</p><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>上面所说的链表是单链表。尽管从链表的头节点遍历到尾节点很简单，但反过来，从后向前遍历九没有那么简单了。这时候我们可以通过给Node对象增加一个头指针的属性就容易多了。</p><p>Node类就变成下面这样了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.element = element;</span><br><span class="line"><span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个双向链表的类如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.element = element;</span><br><span class="line"><span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">this</span>.prev = <span class="literal">null</span>; <span class="comment">// 新增的前指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> head = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> tail = <span class="literal">null</span>; <span class="comment">// 新增的尾节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// methods here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其相关的方法和单链表的方法是大同小异，还有一个循环链表也是差不多啦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/algorithm/linked-list/banner.jpg&quot; alt=&quot;algorithm/linked-list/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称为指针或链接，通常叫指针）组成。自己无聊的时候还翻译一点维基百科上的&lt;a href=&quot;http://reng99.cc/2018/05/29/linked-list/&quot;&gt;链表的介绍&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://reng99.cc/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="链表" scheme="http://reng99.cc/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="http://reng99.cc/2018/06/17/algorithm-queue/"/>
    <id>http://reng99.cc/2018/06/17/algorithm-queue/</id>
    <published>2018-06-17T05:11:08.000Z</published>
    <updated>2018-06-17T09:13:49.692Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/algorithm/queue/queue_banner.jpg" alt="algorithm/queue/queue_banner"></p><p>队列是遵循FIFO（First In First Out，先进先出，也称为先来先服务）原则的一组有序的项。队列在队尾添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。</p><a id="more"></a><h2 id="定义一个队列类"><a href="#定义一个队列类" class="headerlink" title="定义一个队列类"></a>定义一个队列类</h2><p>类似创建栈，创建队列也是使用构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 这里是属性和方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存放数据也是使用一个数组<code>var items = []</code>。</p><h2 id="完整的基本代码"><a href="#完整的基本代码" class="headerlink" title="完整的基本代码"></a>完整的基本代码</h2><p>直接上基本的完整代码和相关的代码注释：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储数据的结构</span></span><br><span class="line"><span class="keyword">var</span> items = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队，相当于入栈</span></span><br><span class="line"><span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">items.push(element);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队，相当于出栈</span></span><br><span class="line"><span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> item.shift();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队首，队列的第一个元素</span></span><br><span class="line"><span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队尾，队列的最后一个元素</span></span><br><span class="line"><span class="keyword">this</span>.end = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items[items.length - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查队列是否是空的队列</span></span><br><span class="line"><span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.length == <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将队列置空</span></span><br><span class="line"><span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">items = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列的长度</span></span><br><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.lenght;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示/打印队列信息</span></span><br><span class="line"><span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(items.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本的代码跟之前的<a href="http://reng99.cc/2018/06/16/algorithm-stack/">栈</a>的代码是大同小异，更多的代码请查看<a href="https://github.com/reng99/algorithm" target="_blank" rel="noopener">https://github.com/reng99/algorithm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/algorithm/queue/queue_banner.jpg&quot; alt=&quot;algorithm/queue/queue_banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;队列是遵循FIFO（First In First Out，先进先出，也称为先来先服务）原则的一组有序的项。队列在队尾添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://reng99.cc/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="队列" scheme="http://reng99.cc/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="http://reng99.cc/2018/06/16/algorithm-stack/"/>
    <id>http://reng99.cc/2018/06/16/algorithm-stack/</id>
    <published>2018-06-16T04:20:52.000Z</published>
    <updated>2018-06-17T04:58:10.221Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/algorithm/stack/stack_banner.jpg" alt="algorithm/stack/stack_banner"></p><p>栈是一种遵从后进先出(LIFO)原则的有序集合。新添加的或待删除的元素都保留在栈的末尾，称为栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都靠近栈底。</p><a id="more"></a><h2 id="定义一个栈类"><a href="#定义一个栈类" class="headerlink" title="定义一个栈类"></a>定义一个栈类</h2><p>使用构造函数来定义一个栈类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 各种属性和方法的声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里定义的存放的数据结构是数组。<code>var item = []</code>。</p><h2 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h2><p>数组本身就有方法push进来一个内容，这里也是使用这个方法，我们来写一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">items.push(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h2><p>pop也是数组的方法，表示出栈，这里也是使用pop为函数名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>还有方法，比如返回栈顶元素，检查是否是空栈等。这里不展开讲，下面全列出代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义存储的数据结构</span></span><br><span class="line"><span class="keyword">var</span> items = []; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈，返回新的数组</span></span><br><span class="line"><span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">items.push(element); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  出栈，弹出栈顶元素</span></span><br><span class="line"><span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> item.pop();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取栈顶元素</span></span><br><span class="line"><span class="keyword">this</span>.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items[items.length<span class="number">-1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否是空栈</span></span><br><span class="line"><span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.length == <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈元素的个数</span></span><br><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示栈的元素</span></span><br><span class="line"><span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(items.toString());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多的代码请看<a href="https://github.com/reng99/algorithm" target="_blank" rel="noopener">https://github.com/reng99/algorithm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/algorithm/stack/stack_banner.jpg&quot; alt=&quot;algorithm/stack/stack_banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;栈是一种遵从后进先出(LIFO)原则的有序集合。新添加的或待删除的元素都保留在栈的末尾，称为栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都靠近栈底。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://reng99.cc/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="栈" scheme="http://reng99.cc/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>javascript基础 -- 内部分享</title>
    <link href="http://reng99.cc/2018/06/14/javascript-foundation/"/>
    <id>http://reng99.cc/2018/06/14/javascript-foundation/</id>
    <published>2018-06-14T15:29:27.000Z</published>
    <updated>2018-06-18T09:59:14.751Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/javascript/foundation/banner.jpg" alt="frontend/javascript/foundation/banner"></p><p>javascript不仅仅在前端比较重要（网页三剑客之一），在后端还是占有一席之地。本博文主要是介绍javascript的基础（主打es5标准）。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>编写<code>javascrip</code>脚本不需要任何特殊的软件或者环境的配置，一个普通的文本编辑器和一个web浏览器就可以了。</p><p>相关的可运行的代码示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="undefined">javascript goes here ...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">mark-up goes here ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>Javascript的语法和Java与C++语言的语法非常相似。</p><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>在javascript中把各条语句放在不同的行上就可以分隔他们，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first statement</span><br><span class="line">second statement</span><br></pre></td></tr></table></figure><p>如果是想放在同一行上，就必须像下面这样用<strong>分号</strong>来分隔它们：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">first statement; second statement;</span><br></pre></td></tr></table></figure><p>为了养成一个良好的编程习惯，建议每条语句后面都添加一个分号。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释能够有效得帮助你了解代码流程。在代码中扮演生活中的便条的角色，能够帮助看者弄清楚脚本到底在干什么。注释有多种方式，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 这是单行注释</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">这是多行注释</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">&lt;!--这是在html页面中的注释--&gt;</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>javascript是松散型语言，在es6标准之前，其变量都是以<code>var</code>来进行定义。es6后就支持let，const等，这是后话了，这里主讲es5。当变量没有var定义的时候，浏览器会自动追加，但是，在不赋值的情况下会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a; <span class="comment"># Uncaught ReferenceError: a is not defined</span></span><br><span class="line"></span><br><span class="line">var a ; <span class="comment"># output is 'undefined'</span></span><br><span class="line"></span><br><span class="line">a = 100 ; <span class="comment"># 100 相当于var a = 100;</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>javascript中数据类型<code>包括基本类型和引用类型</code>。基本类型是指简单的数据段，包括<code>Undefined, Null, Boolean, Number 和 String</code>；引用类型指那些可能由多个值构成的对象。我们可以使用typeof操作符进行检验：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'undefined'</span> <span class="comment"># 值未定义</span></span><br><span class="line"><span class="string">'boolean'</span> <span class="comment"># 布尔值</span></span><br><span class="line"><span class="string">'string'</span> <span class="comment"># 字符串</span></span><br><span class="line"><span class="string">'number'</span> <span class="comment"># 数值</span></span><br><span class="line"><span class="string">'object'</span> <span class="comment"># 值是对象或null , null 是历史遗留下来的问题</span></span><br><span class="line"><span class="string">'function'</span> <span class="comment"># 这个值是函数</span></span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>要用javascript做一些有用的工作，需要能够进行计算和处理数据。也就是完成一些操作。</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>简单的数字加减乘除就不多说了。数字的自加，自减也省略下。不过<code>+</code>号挺有意思的一个运算符号。它可以简单的数字的相加，也可以用于字符串的拼接，和数字转字符串：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10 + 20  <span class="comment"># 30</span></span><br><span class="line"><span class="string">'你好'</span>+<span class="string">'name'</span> <span class="comment"># 你好name</span></span><br><span class="line">10 + <span class="string">''</span> <span class="comment"># 10</span></span><br><span class="line">10 + <span class="string">'20'</span> <span class="comment"># 1020</span></span><br></pre></td></tr></table></figure><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>基本的条件语句的语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">statements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>javascript提供了许多在条件语句里面使用的比较操作符，包括大于，小于，等于等等。返回的是一个布尔值。</p><p>还有一些逻辑运算符，比如&amp;&amp;和||等。</p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>相对于条件语句，循环语句能够多次重复的执行代码。只要给定的条件满足，包含在循环语句里的代码就重复执行下去，一旦给定条件的求值结果不再是true，循环也就到此为止。</p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>相关的基本语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition)&#123;</span><br><span class="line">statements;</span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">statements;</span><br><span class="line">&#125; <span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环重复执行一些代码也很方便，它类似于while循环。可以将while循环的代码改写下，称为for循环：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">initialize;</span><br><span class="line"><span class="keyword">while</span> (condition)&#123;</span><br><span class="line">statements;</span><br><span class="line">increment;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">改写</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(initial condition; test condition; alter condition)&#123;</span><br><span class="line">statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数就是一组允许在你的代码里随时调用的语句。每个函数实际上就是一个短小的脚本。但是函数声明于函数表达式的调用又有所差别，见下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span> , <span class="number">10</span>)); <span class="comment">// 20</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1 , num2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span> , <span class="number">10</span>)); <span class="comment">//TypeError: sum is not a function</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1 , num2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析器会率先读取函数声明，并使其执行任何代码之前可用（可以访问）；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解析。函数中有一个闭包的概念，感兴趣的可戳<a href="http://reng99.cc/2018/03/01/javascript-high-level/">这里</a>。</p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM，文档对象模型。</p><p><strong>文档：DOM中的D</strong>当创建了一个网页并把它加载到web浏览器中时，DOM就在幕后悄然而生了。浏览器会将你编写的网页文档转换成为一个文档对象。</p><p><strong>对象：DOM中的O</strong>与某个特定对象相关联的变量被称为这个对象的属性。只能通过某个特定的对象去调用的函数被称为这个对象的方法。document对象的主要功能就是处理网页内容。</p><p><strong>模型：DOM中的M</strong>DOM中的<code>M</code>代表了<code>Model</code>(模型)，但是说它代表着<code>Map</code>（地图）也未尝不可。模型也好，地图也罢，它们的含义都是某种事物的表现形式。就像一个模型火车代表一列真正的火者。DOM代表着加载到浏览器窗口的当前网页。浏览器提供了网页的地图（或者说模型），而我们可以通过javascript去读取这张地图。</p><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>在DOM里面有很多的节点，这里介绍三种：元素节点、文本节点和属性节点。</p><p><strong>元素节点：</strong>DOM的原子就是元素节点。比如<html>元素。</html></p><p><strong>文本节点：</strong>比如</p><p>content</p>种标签包含的content。<p></p><p><strong>属性节点：</strong>属性节点用来对元素作出更具体的描述。比如:</p><p title="name">mike</p>中的<code>title=&quot;name&quot;</code>就是属性节点了。<p></p><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><p>有三种DOM方法可以获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取。 </p><p><strong>getElementById</strong> 这个方法返回一个与那个有着给定id属性值的元素节点对应的对象。如<code>document.getElementById(&#39;home&#39;)</code></p><p><strong>getElmentsByTagName</strong> 这个方法返回一个对象数组，每个对象分别对应文档里有着给定标签的一个元素。如<code>document.getElementsByTagName(&#39;li&#39;)</code></p><p><strong>getElementsByClassName</strong> 这个方法能让我们通过class属性来访问元素。如<code>document.getElementsByClassName(&#39;item&#39;)</code></p><p>当然我们还是可以通过<code>querySelector,querySelectorAll</code>来获取元素的，比如querySelector(‘.item’),它返回与该匹配模式的第一个元素，即类名是item的元素；querySelectorAll(‘.item’),返回的是一个NodeList实例。</p><h3 id="获取和设置属性"><a href="#获取和设置属性" class="headerlink" title="获取和设置属性"></a>获取和设置属性</h3><p>在获取到元素后，我们就可以设法获取它的属性。getAttribute方法就是用来做这件事的。相应的，setAttribute方法则可以更改属性节点的值。</p><p><strong>getAttribute</strong>用法是<code>object.getAttribute(attribute)</code>，如下例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> paras = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; paras.length; i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(paras[i].getAttribute(<span class="string">'title'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>setAttribute</strong>用法是<code>object.setAttribute(attribute,value)</code>。它允许我们对属性节点的值作出修改。与getAttribute一样，setAttribute也只能用于元素节点。例子有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shopping = <span class="built_in">document</span>.getElementById(<span class="string">'purchases'</span>);</span><br><span class="line">shopping.setAttribute(<span class="string">'title'</span>,<span class="string">'a list of goods'</span>);</span><br></pre></td></tr></table></figure><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>BOM，浏览器对象模型。</p><p>关于BOM具体指的是什么，可以参考DOM的解析。</p><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><p>BOM的核心对象是window，它表示浏览器的一个实例。在浏览器中，window有双重的角色，它既是通过javascript访问浏览器窗口的一个<code>接口</code>，又是规定的全局(Global)对象。这就意味着在网页中定义的任何一个对象，变量和函数，都是以window作为Global对象，因此有权访问parseInt()等方法。</p><p><strong>窗口位置</strong></p><p>用来确定和修改window对象位置的属性和方法很多。IE、Safari、Opera和Chrome（也可以说Trident内核、Webkit内核、Presto内核-&gt;目前废弃，改Blink内核、Blink内核）都提供了screenLeft和screenTop属性，分别表示<code>用于窗口相对屏幕左边和上边的位置</code>。Firefox（可以说是Gecko内核）则在screenX和screenY属性中提供相同的窗口信息，Safari和Chrome也同时支持这两个属性。Opera虽然也是支持screenX和screenY属性，但与screenLeft和screenTop属性并不对应。附上内核的说明<a href="https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/10602413?fr=aladdin" target="_blank" rel="noopener">链接</a>。使用下列代码可以兼容到不同的浏览器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> leftPos = (<span class="keyword">typeof</span> <span class="built_in">window</span>.screenLeft == <span class="string">'number'</span>) ? <span class="built_in">window</span>.screenLeft : <span class="built_in">window</span>.screenX;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> topPos = (<span class="keyword">typeof</span> <span class="built_in">window</span>.screenTop == <span class="string">'number'</span>) ? <span class="built_in">window</span>.screenTop : wnidow.screenY;</span><br></pre></td></tr></table></figure><p><strong>窗口大小</strong></p><p>跨浏览器确定窗口大小不是一件容易的事情。虽然五大浏览器(上面<code>窗口位置</code>提到的浏览器就是了)都提供了innerWidth、innerHeight、outerWidth和outerHeight四个属性，但是不同浏览器和不同版本的相同浏览器的解析又是不一样。在 IE9+、Safari 和 Firefox 中，outerWidth 和 outerHeight 返回浏览器窗口本身的尺寸(无论是从最外层的 window 对象还是从 某个框架访问)。在 Opera 中，这两个属性的值表示页面视图容器1的大小。而 innerWidth 和 innerHeight 则表示该容器中页面视图区的大小(减去边框宽度)。在 Chrome 中，outerWidth、outerHeight 与 innerWidth、innerHeight 返回相同的值，即视口(viewport)大小而非浏览器窗口大小。</p><p>IE8 及更早版本没有提供取得当前浏览器窗口尺寸的属性;不过，它通过 DOM 提供了页面可见区域 的相关信息</p><p>虽然确定不了浏览器的大小，但是我们可以确定页面视口的大小。五大浏览器中，document.documentElement.clientWidth和document.documentElement.clientHeight上保存了页面视口的信息。在IE6中，这些属性必须在 标准模式下才有效;如果是混杂模式，就必须通过 document.body.clientWidth 和 document.body. clientHeight 取得相同信息。整个的兼容的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pageWidth = <span class="built_in">window</span>.innerWidth,</span><br><span class="line">    pageHeight = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> pageWidth != <span class="string">"number"</span>)&#123; <span class="comment">// 针对IE8及以下版本</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.compatMode == <span class="string">'CSS1Compat'</span>)&#123; <span class="comment">// 标准模式下的低版本ie</span></span><br><span class="line">pageWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">pageHeight = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123; <span class="comment">// 混杂模式下的IE,Chrome</span></span><br><span class="line">pageWidth = <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line">pageHeight = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>导航和打开窗口</strong></p><p>window.open()方法既可以导航到一个特定的URL，也可以打开一个新的浏览器窗口。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">"http://www.wrox.com/"</span>,<span class="string">"_blank"</span>,<span class="string">"height=400,width=400,top=10,left=10,resizable=yes"</span>);</span><br><span class="line"># 参数一是url</span><br><span class="line"># 窗口名称</span><br><span class="line"># 窗口样式设置</span><br></pre></td></tr></table></figure><p>更多内容感兴趣自己了解啦。</p><p><strong>间歇调用和超时调用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 间歇调用</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">'hello'</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"># 超时调用</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">'hello'</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><strong>系统对话框</strong></p><p>浏览器通过alert(),confirm()和prompt()方法调用系统对话框向用户显示信息。在浏览器的控制台上面走一遍就知道了。</p><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p>location对象是一个很特别的对象，因为它既是window对象的属性，也是document对象的属性；换句话说，window.location和document.location引用的是同一个对象。location对象的用处不只表现在它保存当前文档的信息，还表现在它将URL解析为独立的片段，让开发人员可以通过不同的属性访问这些片段。比如，hash,host,hostname,href,pathname,port,protocol,search。</p><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><p>navigator对象提供了与浏览器有关的信息。到底提供了哪些新秀，很大程度上取决于用户的浏览器；不过，也有一些公共的属性（如userAgent）存在于所有浏览器中。更多的属性请戳<a href="http://www.runoob.com/jsref/obj-navigator.html" target="_blank" rel="noopener">这里</a></p><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><p>history 对象保存着用户上网的历史记录，从窗口被打开的那一刻算起。因为 history 是 window 对象的属性，因此每个浏览器窗口、每个标签页乃至每个框架，都有自己的 history 对象与特定的 window 对象关联。</p><p>使用go()方法可以在用户的历史浏览记录中任意跳转。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 后退一页</span><br><span class="line">history.go(-1); # 可以写成history.back()</span><br><span class="line"></span><br><span class="line"># 前进一页</span><br><span class="line">history.go(1); # 可以写成history.forward()</span><br><span class="line"></span><br><span class="line"># 前进两页</span><br><span class="line">history.go(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>内部分享就到这里为止吧！自己之前有整理过一个《javascript高级程序设计》的内容，感兴趣请戳<a href="http://reng99.cc/2018/03/01/javascript-high-level/">这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/javascript/foundation/banner.jpg&quot; alt=&quot;frontend/javascript/foundation/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;javascript不仅仅在前端比较重要（网页三剑客之一），在后端还是占有一席之地。本博文主要是介绍javascript的基础（主打es5标准）。&lt;/p&gt;
    
    </summary>
    
      <category term="技术交流" scheme="http://reng99.cc/categories/%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81/"/>
    
    
      <category term="javascript" scheme="http://reng99.cc/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>d3js学习</title>
    <link href="http://reng99.cc/2018/06/09/d3js-learning/"/>
    <id>http://reng99.cc/2018/06/09/d3js-learning/</id>
    <published>2018-06-09T12:26:17.000Z</published>
    <updated>2018-06-13T11:14:07.964Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/d3/banner.jpg" alt="frontend/d3/banner"></p><p>D3.js是一个基于数据处理文档的JavaScript库。D3帮助你使用HTML,<a href="http://www.w3school.com.cn/svg/" target="_blank" rel="noopener">SVG</a>和CSS将数据呈现出来。D3依赖于标准的web技术来绘制可视化的元素。</p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>D3允许你将任意的数据绑定到文档对象模型(DOM)，然后将数据驱动的转换应用到文档中。比如，可以使用D3将数组数据生成一个HTML文档。或者，使用相同的数据创建具有平滑过渡和交互的交互式SVG条形图。</p><p>D3不是一个旨在提供所有可能功能的单一框架。相方的，D3解决了问题的关键：根据数据有效地处理文档。这就避免了专有代理，并提供了非凡的灵活性，展示了诸如HTML，SVG和CSS等网络标准的全部功能。以最小的开销，D3非常快，支持大数据集和动态行为以进行交互和动画。D3的功能风格允许通过各种官方和开发社区模块来重复使用代码。</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>使用W3C DOM API修改文档是很乏味的：方法名是冗长的，并且命令式的方法需要手动迭代和记账临时状态。比如下面改变段落的文字颜色：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> paragraph first <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> paragraph second <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>paragraph third <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> paragraphs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; paragraphs.length; i++)&#123;</span><br><span class="line"><span class="keyword">var</span> paragraph = paragraphs.item(i);</span><br><span class="line"> paragraph.style.setProperty(<span class="string">'color'</span>,<span class="string">'blue'</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D3采用了一种声明式的方法，使用选择(selection)操作任意的节点集合。比如，我们可以重写上面的循环，如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d3.selectAll('p').style('color','blue'); # 有点类似jquery的$('p')</span><br></pre></td></tr></table></figure><p>当然，我们也可以根据需要操作单个节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d3.select(<span class="string">'body'</span>).style(<span class="string">'background-color'</span>,<span class="string">'black'</span>);</span><br></pre></td></tr></table></figure><p>选择器依据W3C选择器API定义，并被现代浏览器很好的支持。</p><p>D3提供了许多用于改变节点的方法：设置属性或样式；注册时间监听器；添加、删除或排序节点；和更改HTML或文字的内容。这些满足绝大多数需求。直接访问底层DOM也是可能的，因为每个D3选择只是一个节点数组。</p><h2 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h2><p>熟悉其他DOM框架(如jquery)的读者能够立即意识到与D3的相似的地方。然而，D3中的样式，属性(attributes)和其他属性(properties)可以指定为数据的函数，而不仅仅是简单的常量。尽管它们看起来简单，但是这些功能很是强大。比如这个<a href="https://github.com/d3/d3-shape" target="_blank" rel="noopener">d3-shape</a>。</p><p>下面来个例子，随机指定段落的颜色：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d3.selectAll(<span class="string">'p'</span>).style(<span class="string">'color'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"># H: Hue 色相(0-360) S：Saturation 饱和度(0-100) L Lightness 明度(0-100)</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hsl("</span> + <span class="built_in">Math</span>.random() * <span class="number">360</span> + <span class="string">",100%,50%)"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>指定奇偶节点的灰色阴影的交替：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d3.selectAll(<span class="string">'p'</span>).style(<span class="string">'color'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d , i</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> i % <span class="number">2</span> ? <span class="string">'#fff'</span> : <span class="string">'#eee'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>计算属性通常指的是绑定数据。数据被指定是一个值数组，并且每个值都被作为第一个参数（d）传递给选择函数。使用默认的索引连接，数据数组中的第一个元素被传递给选择中的第一个节点，第二个元素被传递给第二个选择中的第二个节点，以此类推。比如，将数组数据绑定到段落元素中，就可以使用这些数据来动态计算字体的大小了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d3.selectAll(<span class="string">'p'</span>)</span><br><span class="line">.data([<span class="number">8</span>,<span class="number">16</span>,<span class="number">20</span>])</span><br><span class="line">.style(<span class="string">'font-size'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> d + <span class="string">'px'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一旦数据绑定之后，我们就是可以省略数据运算符了；D3将检索先前绑定的数据。这允许我们重新计算属性而不需要重新绑定。</p><h2 id="Enter-和-Exit"><a href="#Enter-和-Exit" class="headerlink" title="Enter 和 Exit"></a>Enter 和 Exit</h2><p>使用D3的进入和退出选择，可以为传入的数据创建新节点，并删除不需要的传出节点。当数据绑定到选择器的时候，数组数据中的每个元素都与选择中的对应节点配对。如果节点的数量少于数据，则额外的数据形成输入选择，我们可以通过追加输入选择来实例。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d3.select(<span class="string">'body'</span>)</span><br><span class="line">.selectAll(<span class="string">'p'</span>)</span><br><span class="line">.data([<span class="number">4</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">42</span>])</span><br><span class="line">.enter().append(<span class="string">'p'</span>)</span><br><span class="line">.text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> <span class="string">"I'm number "</span> + d + <span class="string">"!"</span>;&#125;)</span><br></pre></td></tr></table></figure><p>更新节点是默认选择–数据运算符的结果。因此，如果忘记了enter和exit选择器，你将只会自动选择存在的相应数据的元素。一种常见的模式是将初始选择分为三部分：要更新的更新节点，要添加的输入节点以及要移除的现有节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Updata...</span></span><br><span class="line"><span class="keyword">var</span> p = d3.select(<span class="string">'body'</span>)</span><br><span class="line">.selectAll(<span class="string">'p'</span>)</span><br><span class="line">.data([<span class="number">4</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">42</span>])</span><br><span class="line">.text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enter...</span></span><br><span class="line">p.enter().append(<span class="string">'p'</span>)</span><br><span class="line">.text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exit...</span></span><br><span class="line">p.exit().remove();</span><br></pre></td></tr></table></figure><p>通过分别处理这三种情况，我们可以准确地指定在哪些节点上运行哪些操作。这可以提高性能并提供对转换的更好控制。例如，对条形图，我们可以使用旧比例初始化输入条，然后将输入条更新为新比例以及退出。</p><p>D3让我们能根据数据来转换成文档，包括创建和销毁元素。D3允许我们更改现有文档以响应用户交互，动画，和来自第三方的异步通知。</p><h2 id="Transformation-not-Representation"><a href="#Transformation-not-Representation" class="headerlink" title="Transformation, not Representation"></a>Transformation, not Representation</h2><p>D3没有引入新的视图表现.与<a href="https://processing.org/" target="_blank" rel="noopener">Processing</a>或<a href="https://mbostock.github.io/protovis/" target="_blank" rel="noopener">Protovis</a>不同，D3的图形标记词汇直接来自Web标准：HTML，SVG和CSS。例如，你可以使用D3创建SVG元素并使用外部的样式进行设置。你可以使用复合的滤镜效果，虚线描边和裁剪，如果浏览器供应商明天提出新功能，我们可以立马使用上–无需更新工具包。而且，如果我们将来决定使用D3以外的工具包，可以自身请整合。</p><p>最重要的是，D3易于浏览器的内置元素检查器进行调试：我们使用D3操作的节点恰好是浏览器本身理解的节点。</p><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><p>随着时间的推移，过渡逐渐应用到样式和属性中。可以通过一些令人舒服的效果，比如“弹性”，“立方体进出”和“线性效果”来控制补间。</p><p>比如，背景颜色渐变为黑色：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d3.select(<span class="string">'body'</span>).transition()</span><br><span class="line">.style(<span class="string">'background-color'</span>,<span class="string">'black'</span>);</span><br></pre></td></tr></table></figure><p>再比如，使用延时策略来更改圆圈的大小：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d3.selectAll(<span class="string">'circle'</span>).transition()</span><br><span class="line">.duration(<span class="number">750</span>)</span><br><span class="line">.delay(<span class="function"><span class="keyword">function</span>(<span class="params">d ,i</span>) </span>&#123; <span class="keyword">return</span> i * <span class="number">10</span>&#125;)</span><br><span class="line">.attr(<span class="string">'r'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(d * scale)&#125;)</span><br></pre></td></tr></table></figure><p>通过只修改实际改变的属性，D3减少了开销，并允许在高帧率时具有更高的图形复杂度。D3还允许通过事件对复杂转换进行排序。而且，你仍然可以CSS3转换。</p><h2 id="一些常用的api讲解"><a href="#一些常用的api讲解" class="headerlink" title="一些常用的api讲解"></a>一些常用的api讲解</h2><h3 id="数组Arrays-d3-array"><a href="#数组Arrays-d3-array" class="headerlink" title="数组Arrays(d3-array)"></a>数组Arrays(d3-array)</h3><p><strong>统计</strong></p><ul><li>d3.min 数组中最小值</li><li>d3.max 数组中最大值</li><li>d3.extent 数组中数据的范围</li><li>d3.sum 数组数据的总和</li><li>d3.mean 数组中算数平均值</li><li>d3.median 数组数据的中位数</li><li>d3.quantile 一个排好序的数字数组的分位数</li><li>d3.variance 数字数组的方差</li><li>d3.deviation 一组数据的标准差</li></ul><p><strong>查找</strong></p><ul><li>d3.scan 对指定的数据执行线性扫描，根据指定的比较器返回最小元素的索引</li><li>d3.bisect 通过二分法获取某个数在排好序中的数组中插入的位置（同d3.bisectRight）</li><li>d3.bisectRight 通过二分法获取某个数在排好序的数组中的插入位置（相等的值归右边）</li><li>d3.bisectLeft 通过二分法获取某个数在排好序的数组中的插入位置（相等的值归左边）</li><li>d3.bisector 自定义一个二等分访问器或比较器</li><li>d3.ascending 比较两个数是否升序</li><li>d3.descending 比较两个数是否降序</li></ul><p><strong>变换</strong></p><ul><li>d3.cross 获取两个数组的笛卡尔积</li><li>d3.merge 合并多个数组为一个数组</li><li>d3.pairs 根据相临的元素合并成数组</li><li>d3.permute 根据数组索引重排数组</li><li>d3.shuffle 随机排序数组（打乱数组排列）</li><li>d3.ticks 从数字区间生成代表值</li><li>d3.tickIncrement 同上</li><li>d3.tickStep 同上</li><li>d3.range 生成一个数值的范围</li><li>d3.transpose 转置二位矩阵</li><li>d3.zip 转置可变数量的数组</li></ul><p><strong>矩形图</strong></p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>虽然D3没有明文规定一定要在缩放矢量图形（SVG,Scalable Vector Graphics）中绘图，但是D3提供了众多的SVG图形生成器，它们都是只支持SVG的。因此，建议使用SVG画布,而SVG除了IE8之前的版本外，现代浏览器都支持。如果你要支持IE8以及IE8-的话，建议使用<a href="http://echarts.baidu.com/" target="_blank" rel="noopener">ECharts</a>，其使用了canvas。</p><p style="text-align:center;color: #f00;font-size: 14px;">精力有限，未能一次更新完…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/d3/banner.jpg&quot; alt=&quot;frontend/d3/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;D3.js是一个基于数据处理文档的JavaScript库。D3帮助你使用HTML,&lt;a href=&quot;http://www.w3school.com.cn/svg/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SVG&lt;/a&gt;和CSS将数据呈现出来。D3依赖于标准的web技术来绘制可视化的元素。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="d3js" scheme="http://reng99.cc/tags/d3js/"/>
    
  </entry>
  
  <entry>
    <title>从前慢</title>
    <link href="http://reng99.cc/2018/05/30/slow-in-past/"/>
    <id>http://reng99.cc/2018/05/30/slow-in-past/</id>
    <published>2018-05-30T05:32:26.000Z</published>
    <updated>2018-05-30T06:19:33.803Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/life/poem/slow-in-past/cover.jpg" alt="life/poem/slow-in-past/cover"></p><p>从前的日光很慢</p><p>车，马，邮件很慢</p><p>一生只够爱一个人</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Time was slower <span class="keyword">in</span> the past,</span><br><span class="line">Carriage, horse, mail needs time a little bit.</span><br><span class="line">Even one greeting needs days to be passed</span><br><span class="line">从前的日子很慢，</span><br><span class="line">车，马，邮件很慢</span><br><span class="line">一个问候，要等上好几天</span><br><span class="line"></span><br><span class="line">The moonlight was slower <span class="keyword">in</span> the past</span><br><span class="line">With leisure, being indolent</span><br><span class="line">The whole dawn needs a cup of tea to interpret</span><br><span class="line">With little stars twinkling,</span><br><span class="line">moments <span class="keyword">in</span> your dreams move fast</span><br><span class="line">从前的月光很慢</span><br><span class="line">有点闲，有点懒</span><br><span class="line">在一杯茶里消磨了整个黄昏</span><br><span class="line">在半个梦里看星星满天</span><br><span class="line"></span><br><span class="line">The pace was slower <span class="keyword">in</span> the past</span><br><span class="line">From one village to another near it</span><br><span class="line">One needs a whole day on foot</span><br><span class="line">从前的脚步好慢</span><br><span class="line">从一个村子</span><br><span class="line">到另一个村子</span><br><span class="line">要走上一天的时间</span><br><span class="line"></span><br><span class="line">The days were slower</span><br><span class="line">but warmer <span class="keyword">in</span> the past</span><br><span class="line">Through a touch of light mist</span><br><span class="line">Year after year, time is out.</span><br><span class="line">从前的日子很慢很暖</span><br><span class="line">裹在淡淡的烟火里</span><br><span class="line">日日年年</span><br><span class="line"></span><br><span class="line">The handerchiefs were finer <span class="keyword">in</span> the past</span><br><span class="line">Young ladies with soft eyebrows</span><br><span class="line"><span class="keyword">in</span> their perfect fit</span><br><span class="line">stitch by stitch,</span><br><span class="line">more delicate</span><br><span class="line">从前的手帕也很好看</span><br><span class="line">最是那低眉的女子</span><br><span class="line">精致的，一针一线</span><br><span class="line"></span><br><span class="line">It took time to fall <span class="keyword">in</span> love <span class="keyword">in</span> the past</span><br><span class="line">So slow, one needs one<span class="string">'s lifetime</span></span><br><span class="line"><span class="string">seeking for Mr/Ms Right</span></span><br><span class="line"><span class="string">So slow, you need your whole life</span></span><br><span class="line"><span class="string">to love people that suit</span></span><br><span class="line"><span class="string">从前的爱情很慢</span></span><br><span class="line"><span class="string">慢的，用一辈子去等一个人</span></span><br><span class="line"><span class="string">慢的，一生只爱一个人</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now with everything on the go,</span></span><br><span class="line"><span class="string">one gets up earlier a little bit</span></span><br><span class="line"><span class="string">No time to say good morning,</span></span><br><span class="line"><span class="string">even a hug you cannot wait</span></span><br><span class="line"><span class="string">现在快</span></span><br><span class="line"><span class="string">快到每天早早起床</span></span><br><span class="line"><span class="string">来不及说早安</span></span><br><span class="line"><span class="string">来不及拥抱</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In fact, in the city center,</span></span><br><span class="line"><span class="string">even 5 minutes'</span> on foot</span><br><span class="line">Or a bit of leisure time</span><br><span class="line">after your breakfast</span><br><span class="line">Everything is different</span><br><span class="line">其实</span><br><span class="line">在中成，市中心，5分钟</span><br><span class="line">茶余饭后的那一点点闲暇时光</span><br><span class="line">就变了一个样</span><br><span class="line"></span><br><span class="line">Now is faster</span><br><span class="line">everything is <span class="keyword">in</span> the replacement</span><br><span class="line">So fast that life is easily to be parted</span><br><span class="line">even you cannot notice it</span><br><span class="line">现在快</span><br><span class="line">什么都在更新换代</span><br><span class="line">快到将生活扰得七零八落</span><br><span class="line"></span><br><span class="line">In fact, cluttered life can be combined </span><br><span class="line">by one after one highlight</span><br><span class="line">Like the classical furnishings </span><br><span class="line">mixed with modern decorations</span><br><span class="line"><span class="keyword">in</span> a sample apartment</span><br><span class="line">Less dull, less stale, much more exquisite</span><br><span class="line">其实，杂乱的生活也可以拼凑出一个个美好</span><br><span class="line">就像样板间里带着古典气息的摆设</span><br><span class="line">和现代化装修的搭一起</span><br><span class="line">少了分沉闷古旧</span><br><span class="line">多了份细腻</span><br><span class="line"></span><br><span class="line">Now time flies faster,</span><br><span class="line">just keep the pace after complaint</span><br><span class="line">Strive <span class="keyword">for</span> your dream </span><br><span class="line">with your daring heart</span><br><span class="line">Embrace your leisure time </span><br><span class="line">until you are old but not <span class="keyword">in</span> the past</span><br><span class="line">Why not plan <span class="keyword">for</span> your future earlier </span><br><span class="line">to some extent?</span><br><span class="line">现在快，抱怨几句，仍要跟上节奏</span><br><span class="line">朝着自己的梦想，再努把力</span><br><span class="line">把从前的悠闲搬到老年时享受</span><br><span class="line">其实，何不早早规划未来？</span><br><span class="line"></span><br><span class="line">Now is faster, dating with your love, </span><br><span class="line">after dinner no time left</span><br><span class="line">In fact, time is innocent, </span><br><span class="line">but it is all your mind’s fault</span><br><span class="line">现在快，与恋人约会</span><br><span class="line">吃个饭，没了时间</span><br><span class="line">其实</span><br><span class="line">与时间无关</span><br><span class="line">是心理在作祟</span><br><span class="line"></span><br><span class="line">With a peaceful mind, </span><br><span class="line">walking around the Bell Tower </span><br><span class="line"><span class="keyword">in</span> the old street</span><br><span class="line">Choosing a book <span class="keyword">in</span> the county library, </span><br><span class="line">wandering <span class="keyword">in</span> the old avenue on foot</span><br><span class="line">You forget time has vanished</span><br><span class="line">怀着一份平和</span><br><span class="line">从钟楼老街溜达一圈</span><br><span class="line">县图书馆选本书</span><br><span class="line">老巷子里逛一逛</span><br><span class="line">老了时光 </span><br><span class="line"></span><br><span class="line">Now is faster, </span><br><span class="line">so fast that we always recall </span><br><span class="line">beauty <span class="keyword">in</span> the past</span><br><span class="line">Passionately think of the world </span><br><span class="line">once <span class="keyword">in</span> its purest</span><br><span class="line">现在快，</span><br><span class="line">快到我们总是回忆起以前的美</span><br><span class="line">然后疯狂想念那些纯净的世界</span><br><span class="line"></span><br><span class="line">In fact, <span class="keyword">for</span> your current anguish, beat it</span><br><span class="line">Go to the North Square, </span><br><span class="line">and close your eyes <span class="keyword">in</span> a moment</span><br><span class="line">overwhelming yourself </span><br><span class="line">with those golden days <span class="keyword">in</span> the past</span><br><span class="line">Enjoy yourself with nothing <span class="keyword">in</span> your heart</span><br><span class="line">其实，暂且搁置现在的烦闷</span><br><span class="line">去到北广场，然后闭上双眼</span><br><span class="line">任那些美好将自己淹没</span><br><span class="line">放空那个美好的世界享受下就好</span><br><span class="line"></span><br><span class="line">It is good to be an ordinary person at hard thought</span><br><span class="line">When you said slow pace is fine, </span><br><span class="line">I back you a lot</span><br><span class="line">其实想想，做个中庸的人也不错</span><br><span class="line">你说慢节奏生活好，我附和着</span><br><span class="line"></span><br><span class="line">When he told fast pace adds more spice to life , </span><br><span class="line">I agree without second thought</span><br><span class="line">Like mansion with its luxury, </span><br><span class="line">tiny apartment with its refinement</span><br><span class="line">Good or bad, tell me not</span><br><span class="line">他说快节奏生活刺激，我也赞同</span><br><span class="line">就像小公寓精致，大宅奢阔</span><br><span class="line">各有千秋，委实难分好坏</span><br><span class="line"></span><br><span class="line">No matter how slow the past time was, </span><br><span class="line">how fast it is <span class="keyword">in</span> the current</span><br><span class="line">无论从前有多慢</span><br><span class="line">无论现在有多快</span><br><span class="line"></span><br><span class="line">I know, the earth under your feet,</span><br><span class="line">the love around your heart</span><br><span class="line">Treasure them with your best,</span><br><span class="line">no matter <span class="keyword">in</span> the past </span><br><span class="line">or <span class="keyword">in</span> the right moment.</span><br><span class="line">我知道，脚下的土地和身边的爱人</span><br><span class="line">无论从前还是现在</span><br><span class="line">都要尽全力守护和珍惜</span><br><span class="line"></span><br><span class="line">-- 木心</span><br></pre></td></tr></table></figure><p>我知道，脚下的土地和身边的爱人</p><p>无论从前还是现在</p><p>都要尽全力守护和珍惜</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/life/poem/slow-in-past/cover.jpg&quot; alt=&quot;life/poem/slow-in-past/cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;从前的日光很慢&lt;/p&gt;
&lt;p&gt;车，马，邮件很慢&lt;/p&gt;
&lt;p&gt;一生只够爱一个人&lt;/p&gt;
    
    </summary>
    
      <category term="诗和远方" scheme="http://reng99.cc/categories/%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9/"/>
    
    
      <category term="诗" scheme="http://reng99.cc/tags/%E8%AF%97/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="http://reng99.cc/2018/05/29/linked-list/"/>
    <id>http://reng99.cc/2018/05/29/linked-list/</id>
    <published>2018-05-29T10:42:37.000Z</published>
    <updated>2018-06-17T09:44:08.982Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/translation/linked_list/banner.jpg" alt="translation/linked_list/banner"></p><p>在计算机科学领域，链表就是一组数据的线性集合，这种集合的顺序不是根据数据被存放在内存中的顺序决定的。而是根据每个元素的指向下一个的指针决定。</p><a id="more"></a><p>链表是由类队列的一组节点组合而成的数据。每个节点包括了数据和一个指向下一个节点的指针。这种结构在对数据的添加和移除是非常方便的，不管数据所在的位置。</p><p><img src="http://omu538iq8.bkt.clouddn.com/translation/linked_list/data.png" alt="translation/linked_list/data"></p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li><p>相比数组，链表因为使用指针来存储会更耗内存</p></li><li><p>链表的节点必须是从头开始按照顺序读取，因为它本质上就是顺序访问</p></li><li><p>节点不连续存储，大大增加了访问列表中元素的所需的时间端，尤其在cpu的缓存中</p></li><li><p>当反向便利链表的时候会比较困难。比如，单链表向后导航比较麻烦，而双链表比较容易阅读，内存消耗在为后向指针分配空间</p></li></ul><h2 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h2><p>链表中的每条记录通常被称为<code>元素或节点</code>（一般叫节点）。</p><p>每个节点的字段包含下一个节点的的地址，这个字段通常被叫做<code>下个链接或者下个指向</code>（一般叫指针）。剩下的字段被称为<code>数据，信息，值，负载或者载荷</code>（一般称为值）。</p><p>列表的头是它的第一个节点，列表的尾部可以指除头节点后其余部分，或者指列表最后的一个节点。</p><h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3><p>单链表包含数据字段和指向下个节点的尾指针字段。可以在单链表上执行的操作包括插入，删除和遍历。</p><p><img src="http://omu538iq8.bkt.clouddn.com/translation/linked_list/data.png" alt="translation/linked_list/data"></p><p>以下的代码演示了如何将具有数据<code>值</code>的新节点添加到单链表的末尾：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">node addNode(node head , int value)&#123;</span><br><span class="line">node temp,p; // 声明两个节点temp和p</span><br><span class="line">temp = createNode(); // 假设方法createNode创建一个data=0和指向空的指针节点</span><br><span class="line">temp-&gt;data = value; // 添加元素的值到创建的节点data字段</span><br><span class="line"><span class="keyword">if</span>(head == NULL)&#123;</span><br><span class="line">head = temp; // 当链表尾空时</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">p = head; // head节点赋值给p节点</span><br><span class="line"><span class="keyword">while</span>(p-&gt;next != NULL)&#123;</span><br><span class="line">p = p-&gt;next; // 遍历链表到最后一个节点。最后一个节点的指向为空</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;next = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>在双向链表中，节点中除了指向下一个节点的指针，还包含指向序列中上一个节点的指针字段。</p><p><img src="http://omu538iq8.bkt.clouddn.com/translation/linked_list/double_linkedl_list.png" alt="translation/linked_list/double_linkedl_list"></p><p>许多现代操作系统使用双向链接列表来维护。</p><h2 id="权衡"><a href="#权衡" class="headerlink" title="权衡"></a>权衡</h2><p>和计算机编程和设计中的大多数选择一样，没有一种方法是可以适用多种情况的。链表数据结构可能在一种情况下运行良好，在另外一个情况下就有问题了。下面列表是包含链表的数据结构的权衡。</p><p><img src="http://omu538iq8.bkt.clouddn.com/translation/linked_list/list_compare.png" alt="translation/linked_list/list_compare"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://en.wikipedia.org/wiki/Linked_list" target="_blank" rel="noopener">维基百科link_list</a></p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>自己在维基百科上查找到的介绍，然后翻译了一丢丢，链接请见上面的参考。翻译到此为止，如果看者感兴趣可以自行查看啦 @～@</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/translation/linked_list/banner.jpg&quot; alt=&quot;translation/linked_list/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;在计算机科学领域，链表就是一组数据的线性集合，这种集合的顺序不是根据数据被存放在内存中的顺序决定的。而是根据每个元素的指向下一个的指针决定。&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://reng99.cc/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="链表" scheme="http://reng99.cc/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>TCP的三次握手和四次挥手</title>
    <link href="http://reng99.cc/2018/05/01/tcp-three-handshake-four-bandge/"/>
    <id>http://reng99.cc/2018/05/01/tcp-three-handshake-four-bandge/</id>
    <published>2018-05-01T10:36:17.000Z</published>
    <updated>2018-05-11T14:54:58.843Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/network/tcp/handshake3_bandge4.jpg" alt="network/tcp/handshake3_bandge4.jpg"></p><p>UDP（用户数据报协议）和TCP（传输控制协议）都是传输层的协议，但是前者无连接，不安全，而后者提供面向链接的服务，倡导网络安全的环境下，还是推荐使用TCP。然而，TCP里面的知识点够啃一丢丢的时间了，这里只是解析TCP的三次握手和四次挥手啦😊</p><a id="more"></a><h2 id="TCP报文段的首部格式"><a href="#TCP报文段的首部格式" class="headerlink" title="TCP报文段的首部格式"></a>TCP报文段的首部格式</h2><p>TCP报文段首部的前20个字节是固定的，后面的有4n字节是根据需要而增加的选项（n是整数）。因此TCP首部的最小长度是20字节。见下图：</p><p><img src="http://omu538iq8.bkt.clouddn.com/network/tcp/tcp_header_desc.png" alt="network/tcp/tcp_header_desc.png"></p><p>相关字段的意义：</p><h3 id="源端口和目的端口"><a href="#源端口和目的端口" class="headerlink" title="源端口和目的端口"></a>源端口和目的端口</h3><p>分别写入源端口号和目的端口号。</p><h3 id="序号"><a href="#序号" class="headerlink" title="序号"></a>序号</h3><p>TCP是面向字节流的。在一个TCP连接中传送的字节流中的每一个字节都按顺序编号。整个要传送的字节流的起始序号必须再链接建立时设置。首部中的序号字段值则指的是<strong>本报文段</strong>所发送的数据的第一个字节序号。比如，一段报文的序号字段值是301，而携带的数据共有100字节。这就表明：本报文段的数据的第一个字节的序号是301，而最后一个字节的序号是400。显然，下一个报文段（如果还有的话）的数据序号应当从401开始，即下一个报文的序号字段值为401.这个字段的名称也叫做<strong>报文段序号</strong>。</p><h3 id="确认号"><a href="#确认号" class="headerlink" title="确认号"></a>确认号</h3><p>是<strong>期望收到对方下一个报文段的第一个数据字节的序号。</strong></p><p>例如，B正确收到了A发送过来的一个报文段，其序号字段值是501，而数据长度是200字节（501～700），这表明B正确收到了A发送的到序号700为止的数据。因此，B期望收到A的下一个数据序号是701，于是B再发送给A的确认报文段中把确认号置为701。注意⚠️：现在的确认号不是501，也不是700，而是701。</p><p>总之：</p><p><code>若确认号 = N ，则表明：到序号 N - 1 为止的所有数据都已经正确收到。</code></p><h3 id="数据偏移"><a href="#数据偏移" class="headerlink" title="数据偏移"></a>数据偏移</h3><p>指出<strong>TCP报文段的数据起始处</strong>距离<strong>TCP报文段的起始处</strong>有多远。这个字段实际上是指出TCP报文段的首部长度。由于首部中还有长度不确定的选项字段，因此数据偏移字段是必要的。但是应该注意，<strong>数据偏移</strong>的单位是32位字（即以4字节长的字位计算单位）。由于4位二进制数能够表示的最大十进制数字是15，因此数据偏移的最大值是60字节，这也是TCP首部的最大长度（即选项长度不能超过40字节）。</p><h3 id="保留"><a href="#保留" class="headerlink" title="保留"></a>保留</h3><p>占六位，保留为今后使用，但目前应该置为0。</p><h3 id="紧急-URG-URGent"><a href="#紧急-URG-URGent" class="headerlink" title="紧急 URG(URGent)"></a>紧急 URG(URGent)</h3><p>当<code>URG = 1</code>时，表明紧急指针字段有效。它告诉系统次报文段中有紧急数据，应尽快传送（相当于高优先级的数据），而不要按原来的排队顺序来传送。</p><p>例如：已经发送了很长的一个程序要在远地的主机上运行。但是后来发现了一些问题，需要取消该程序的运行。因此用户从键盘发出中断命令（control + c）。如果在所有的数据被处理完毕后这两个字符才被交付接收方的应用程序。这样做就浪费了许多时间。</p><p>当URG置1时，发送应用进程就告诉发送方的TCP有紧急数据要传送。于是发送方TCP就把紧急数据插入到本报文段数据的<strong>最前面</strong>，而在紧急数据后面的数据仍然是普通数据。这时要与首部中<strong>紧急指针(Urgent Pointer)</strong>字段配合使用。</p><h3 id="确认-ACK-ACKnowlegment"><a href="#确认-ACK-ACKnowlegment" class="headerlink" title="确认 ACK(ACKnowlegment)"></a>确认 ACK(ACKnowlegment)</h3><p>仅当<code>ACK = 1</code>时确认号字段才有效。当<code>ACK = 0</code>时，确认号无效。TCP 规定，在连接建立后所有传送报文段都必须把ACK置1。</p><h3 id="推送PSH（PuSH）"><a href="#推送PSH（PuSH）" class="headerlink" title="推送PSH（PuSH）"></a>推送PSH（PuSH）</h3><p>当两个应用进程进行交互式的通信时，有时在一端的应用进程希望在键入一个命令行后立即就能够收到对方的响应。在这种情况下，TCP就可以使用推送（push）操作。这时，发送方TCP把PSH置1，并立即创建一个报文段发送出去。接收方TCP收到PSH=1的报文，就尽快地（即“推送”向前）交付接受应用进程，<code>而不再等到整个缓存都填满了后再向上交付</code>。</p><h3 id="复位-RST-ReSeT"><a href="#复位-RST-ReSeT" class="headerlink" title="复位 RST(ReSeT)"></a>复位 RST(ReSeT)</h3><p>当<code>RST = 1</code>时，表明TCP连接中出现严重差错（如有雨主机奔溃或其他原因），必须释放连接，然后再重新建立运输连接。RST置1还用来拒绝一个非法的报文段或拒绝打开一个连接。RST也可称为重建位或重置位。</p><h3 id="同步SYN-SYNchronization"><a href="#同步SYN-SYNchronization" class="headerlink" title="同步SYN(SYNchronization)"></a>同步SYN(SYNchronization)</h3><p>在连接建立时用来同步序号。当<code>SYN = 1而ACK = 0</code>时，表明这是一个连接请求报文。对方若同意建立连接，则应在响应的报文中使<code>SYN = 1和ACK = 1</code>。因此，SYN置为1就表示这是一个连接请求或连接接收报文。</p><h3 id="终止-FIN-FINis"><a href="#终止-FIN-FINis" class="headerlink" title="终止 FIN(FINis)"></a>终止 FIN(FINis)</h3><p>用来释放一个连接。当<code>FIN = 1</code>时，表明此报文段的发送方的数据已发送完毕，并要求释放运输链接。</p><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><p>窗口指的是发送本报文段的一方的<strong>接收窗口</strong>（而不是自己的发送窗口）。窗口值<strong>告诉对方</strong>：从本报文段首部中的确认号算起，接收方目前允许对方发送的数据量。之所以要有这个限制，是因为接收方的数据缓存空间有限的。总之，<strong>窗口值作为接收方让发送方设置其发送窗口的依据</strong></p><p>例如，设确认号是701，窗口字段是1000。这就表明，从701号算起，发送此报文段的一方还有接收1000个字节数据（字节号是701-1700）的接收缓存空间。</p><p>总而言之：<strong>窗口字段明确指出了现在允许对方发送的数据量。窗口值是经常在动态变化着。</strong></p><h3 id="检验和"><a href="#检验和" class="headerlink" title="检验和"></a>检验和</h3><p>检验和字段检验的范围包括首部和数据这两部分。</p><h3 id="紧急指针"><a href="#紧急指针" class="headerlink" title="紧急指针"></a>紧急指针</h3><p>紧急指针只有在<strong>URG=1</strong>时才有意义，它指出本报文段中的紧急数据的字节数（紧急数据结束后就是普通数据）。</p><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><p>长度可变，最长可达40字节。当没有使用<strong>选项</strong>时，TCP的首部长度是20字节。</p><h2 id="TCP的链接建立（三次握手）"><a href="#TCP的链接建立（三次握手）" class="headerlink" title="TCP的链接建立（三次握手）"></a>TCP的链接建立（三次握手）</h2><p>B的TCP服务器进程先创建传<code>输控制块TCP</code>，准备接收客户A进程的链接请求。然后服务器进程就处于LISTEN（接收）状态，等待客户的连接请求。如有，即作出响应。</p><p style="color: red;text-align:center;">精力有限，未能一次更新完，亲见谅…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/network/tcp/handshake3_bandge4.jpg&quot; alt=&quot;network/tcp/handshake3_bandge4.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;UDP（用户数据报协议）和TCP（传输控制协议）都是传输层的协议，但是前者无连接，不安全，而后者提供面向链接的服务，倡导网络安全的环境下，还是推荐使用TCP。然而，TCP里面的知识点够啃一丢丢的时间了，这里只是解析TCP的三次握手和四次挥手啦😊&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://reng99.cc/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="tcp" scheme="http://reng99.cc/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>前端安全</title>
    <link href="http://reng99.cc/2018/04/13/frontend-security/"/>
    <id>http://reng99.cc/2018/04/13/frontend-security/</id>
    <published>2018-04-12T17:09:42.000Z</published>
    <updated>2018-07-24T12:59:49.339Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/javascript/frontend_security_banner.jpg" alt="frontend/javascript/frontend_security_banner"></p><p>哈哈哈，本来想在本博文中进行前端安全的讲解的，无奈在断断续续整理的一段时间后…</p><a id="more"></a><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>写了一段文字后，发现安全的信息全放在一篇博文中讲述，hold不住，所以会分解进行个人理解。主要是分为下面的几点————</p><p>⚠️ 链接会在后续添加</p><ul><li><p>点击劫持</p></li><li><p>CSRF攻击</p></li><li><p><a href="http://reng99.cc/2018/07/24/xss-attack/">XSS攻击</a></p></li><li><p>DDos攻击</p></li><li><p>SQL注入</p></li><li><p>文件上传漏洞</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p>某诺同事分享文档</p></li><li><p>图解HTTP</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/javascript/frontend_security_banner.jpg&quot; alt=&quot;frontend/javascript/frontend_security_banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;哈哈哈，本来想在本博文中进行前端安全的讲解的，无奈在断断续续整理的一段时间后…&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="安全" scheme="http://reng99.cc/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
