<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Reng の Blog</title>
  
  <subtitle>If you don&#39;t think, then you shouldn&#39;t talk.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://reng99.cc/"/>
  <updated>2018-09-16T09:25:39.960Z</updated>
  <id>http://reng99.cc/</id>
  
  <author>
    <name>嘉明</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谈谈rem单位</title>
    <link href="http://reng99.cc/2018/09/16/talk-about-rem/"/>
    <id>http://reng99.cc/2018/09/16/talk-about-rem/</id>
    <published>2018-09-16T02:18:54.000Z</published>
    <updated>2018-09-16T09:25:39.960Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/rem/banner.jpg" alt="frontend/css/rem/banner"></p><p>前端开发中，移动端的开发可以说是举足轻重了，可以又面临着不同设备尺寸和分辨率的尴尬点。今天[2018-09-16]<code>台风山竹</code>登陆广东，来势汹汹，外出是不可能的了，那就宅着写写这篇小文章吧…</p><a id="more"></a><p>说到移动端的响应布局，你也许会想到：</p><h2 id="超长的前奏"><a href="#超长的前奏" class="headerlink" title="超长的前奏"></a>超长的前奏</h2><p><strong>1. 使用CSS3媒体查询的方法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">400px</span>) &#123;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/rem/media_demo.gif" alt="frontend/css/rem/media_demo"></p><p>嗯，这种的样式的工作量超级大，因为要对图片和文字等资源针对不同的尺寸进行设置。一种凉凉的感觉从心底飘过～～～</p><p><strong>2. 直接使用百分比</strong></p><p>这种方法比较适合移动端上，页面图片铺满宽度屏幕的运营推广活动的情况。因为在设计的时候会有一个<strong>750px</strong>的宽等等设计规范，能够很好的适配到不同手机啦。然后工作就是切图了…</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#percent</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-direction</span>: row;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#percent</span> <span class="selector-class">.item</span>&#123;</span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#percent</span> <span class="selector-class">.item</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/rem/percent_demo.gif" alt="frontend/css/rem/percent_demo"></p><p>这种切图比较费力，如果认真看上面的gif图的话会发现是三张同等宽高的图片，在<code>chrome</code>上的调试器上看是有白条的，不过不影响。因为在真机上是不存在的。如果不是切图宽度等分的情况下，那就不建议这种百分比的适配方法了。</p><p><strong>3. 固定宽度</strong></p><p>这种方法比较适合<code>PC</code>端开发，在移动端是必须不能才去的。因为移动端的宽度足够，能够带来足够好的体验，并且最重要的一点是其像素比是1啊。在缩放的时候不会带来内容变形的体验。如果到移动端上面，那就呵呵了～</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">680px</span>;</span><br><span class="line"><span class="attribute">background</span>: yellow;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/rem/fixed_width_demo.gif" alt="frontend/css/rem/fixed_width_demo"></p><p><strong>4. 使用viewport</strong></p><p>移动设备上的viewport是设备屏幕上用来显示网页的那部分区域，再具体一点就是浏览器上用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域大，也可能比浏览器的可视区域小。</p><p>这得要在网页的<code>head</code>标签上面设置<code>meta</code>，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>嗯，这个知识点还是一丢丢的，详细的内容参考<a href="http://www.runoob.com/css/css-rwd-viewport.html" target="_blank" rel="noopener">菜鸟教程：响应式 Web 设计 - Viewport</a>。 本博文的重点不是这个～</p><p>是的，我们可以使用<code>REM</code>来进行适配啊：可以说是目前最强的移动端适配方案…</p><p><img src="https://user-gold-cdn.xitu.io/2018/9/7/165afd3071455e62?w=337&amp;h=169&amp;f=png&amp;s=94323" alt="frontend/talk-about-gobang-game/qiaoba"></p><h2 id="rem是什么"><a href="#rem是什么" class="headerlink" title="rem是什么"></a>rem是什么</h2><p><code>rem和em</code>单位一样，都是一个相对单位，不同的是<code>em</code>是相对于父元素的<code>font-size</code>进行计算，<code>rem</code>是相对于<strong>根元素html</strong>的<code>font-size</code>进行计算的，这样一来<code>rem</code>就完美的绕开了复杂的层级关系，实现了类似em单位的功能。默认情况下，浏览器给的字体大小是<strong>16px</strong>，按照转化关系<code>16px = 1rem</code>。</p><p>咦，都是固定了根元素是默认<strong>16px</strong>了，如何设备不同的移动设备呢？</p><p>问题提出也是答案所在，我们动态改变<strong>根元素html</strong>的字体默认大小不就行了嘛！见下：</p><h2 id="rem自适应处理方案"><a href="#rem自适应处理方案" class="headerlink" title="rem自适应处理方案"></a>rem自适应处理方案</h2><p>使用rem布局的时候，为了兼容不同的分辨率，我们应该要动态的修正<code>根字体</code>的大小，让所有的用rem单位的子元素跟着一起缩放，从而达到自适应的效果。</p><p>嗯，下面就是动态改变<code>根字体</code>的大小了，采取的当然是<code>javascript</code>来进行控制啦，不然怎么知道像素比哦。</p><p>一种是获取像素比【像素比=物理像素/逻辑像素】通过<code>devicePixelRatio</code>，其兼容性在ie上要在<code>11及11+</code>，兼容性良好。罢了，不讨论<code>IE浏览器</code>了，看者慎用<code>IE</code>…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> devicePixelRatio = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>嗯，在移动端上面适配，<code>rem和viewport</code>搭配效果更佳哦！完整代码片段如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> fontSizeMatchDeviceWidth = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> deviceWidth = <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">window</span>.screen.width || <span class="number">320</span>,</span><br><span class="line">devicePixelRatio = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span>,</span><br><span class="line">fontSize = (<span class="built_in">Math</span>.ceil(deviceWidth * <span class="number">16</span> / <span class="number">320</span>)),</span><br><span class="line">scale = <span class="number">1</span> / devicePixelRatio; <span class="comment">// 默认的缩放</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = fontSize + <span class="string">'px'</span>;</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'meta[name="viewport"]'</span>).setAttribute(<span class="string">'content'</span>,<span class="string">'width=device-width,initial-scale='</span>+<span class="string">'scale'</span>+<span class="string">',maximum-scale='</span>+scale+<span class="string">',minimum-scale='</span>+scale+<span class="string">',user-scalable=no,viewport-fit=cover'</span>); <span class="comment">// 增加viewport-fit=cover适配iphone x</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line"><span class="keyword">if</span>(<span class="regexp">/android/i</span>.test(ua) || <span class="regexp">/ipad|itouch|iphone/i</span>.test(ua)|| <span class="regexp">/tianqi/i</span>.test(ua))&#123;</span><br><span class="line">fontSizeMatchDeviceWidth();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// pc端优雅降级</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = <span class="string">'24px'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>在上面的基础上，添加点点样式，完整的一个demo走一下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: yellow;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/rem/rem_demo.gif" alt="frontend/css/rem/rem_demo"></p><p>如有纰漏，欢迎看到的各位小哥哥小姐姐指正 @～@！ 更多内容请前往<a href="https://github.com/reng99" target="_blank" rel="noopener">我的github</a></p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/rem/qiaoba2.png" alt="frontend/css/rem/qiaoba2"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/css/rem/banner.jpg&quot; alt=&quot;frontend/css/rem/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;前端开发中，移动端的开发可以说是举足轻重了，可以又面临着不同设备尺寸和分辨率的尴尬点。今天[2018-09-16]&lt;code&gt;台风山竹&lt;/code&gt;登陆广东，来势汹汹，外出是不可能的了，那就宅着写写这篇小文章吧…&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="http://reng99.cc/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>谈谈前端实现五子棋游戏</title>
    <link href="http://reng99.cc/2018/09/06/talk-about-gobang-game/"/>
    <id>http://reng99.cc/2018/09/06/talk-about-gobang-game/</id>
    <published>2018-09-06T13:35:00.000Z</published>
    <updated>2018-09-07T02:08:01.617Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/talk-about-gobang-game/banner.jpg" alt="frontend/talk-about-gobang-game/banner"></p><p>闲来无事，记录下自己完成的五子棋，纯前端实现，使用到的知识点是canvas和类。运行的时候请使用谷歌浏览器哈➡️<a href="http://reng99.cc/demos/src/gobang/">休闲游戏–五子棋</a>😊 </p><a id="more"></a><p>五子棋的下法我就不介绍了，下面讲下实现的几个点：</p><ul><li>实现人人对战</li><li>实现悔棋功能</li><li>实现撤消悔棋功能</li><li>胜利提示功能</li></ul><p>嗯，一步一步来讲解下，在下棋的时候，得有棋盘吧，我这里使用<code>canvas</code>进行绘制：</p><h2 id="画棋盘"><a href="#画棋盘" class="headerlink" title="画棋盘"></a>画棋盘</h2><p>这里分为两种棋盘的表现，一种是看得见的，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 画出棋盘</span></span><br><span class="line">drawChessBoard() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;options&#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">this</span>.chessboard.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    <span class="keyword">const</span> &#123;count,padding,borderColor&#125; = options.gobangStyle; <span class="comment">// 传入棋盘格数，边距和边框颜色</span></span><br><span class="line">    <span class="keyword">this</span>.chessboard.width = <span class="keyword">this</span>.chessboard.height = padding * count;</span><br><span class="line">    context.strokeStyle = borderColor;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line">        context.moveTo(<span class="number">15</span> + i * padding , <span class="number">15</span>);</span><br><span class="line">        context.lineTo(<span class="number">15</span> + i * padding , count * padding - <span class="number">15</span>);</span><br><span class="line">        context.stroke();</span><br><span class="line">        context.moveTo(<span class="number">15</span> , <span class="number">15</span> + i * padding);</span><br><span class="line">        context.lineTo(count * padding - <span class="number">15</span> , <span class="number">15</span> + i * padding);</span><br><span class="line">        context.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>画出的视觉上的棋盘效果如下：</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/talk-about-gobang-game/gobang-place.png" alt="frontend/talk-about-gobang-game/gobang-place"></p><p>在画出棋盘之后，还是不能够下棋的，需要有一个看不见的棋盘来记录落子的位置，这里使用到矩阵的形式了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 初始棋盘矩阵</span></span><br><span class="line">initChessboardMatrix() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;options&#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> checkerboard = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; options.gobangStyle.count; x++)&#123;</span><br><span class="line">        checkerboard[x] = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; options.gobangStyle.count; y++)&#123;</span><br><span class="line">            checkerboard[x][y] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.checkerboard = checkerboard;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下棋"><a href="#下棋" class="headerlink" title="下棋"></a>下棋</h2><p>在棋盘准备好之后，就是刻画棋子了，无棋子怎么下棋呢？棋子要考虑到黑白两色的，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 刻画棋子</span></span><br><span class="line">drawChessman(x,y,isBlack )&#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">this</span>.chessboard.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.arc(<span class="number">15</span> + x * <span class="number">30</span>, <span class="number">15</span> + y * <span class="number">30</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);<span class="comment">// 画圆</span></span><br><span class="line">    context.closePath();</span><br><span class="line">    <span class="comment">//渐变</span></span><br><span class="line">    <span class="keyword">var</span> gradient = context.createRadialGradient(<span class="number">15</span> + x * <span class="number">30</span> + <span class="number">2</span>, <span class="number">15</span> + y * <span class="number">30</span> - <span class="number">2</span>, <span class="number">13</span>, <span class="number">15</span> + x * <span class="number">30</span> + <span class="number">2</span>, <span class="number">15</span> + y * <span class="number">30</span> - <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(isBlack)&#123; <span class="comment">// 黑子</span></span><br><span class="line">        gradient.addColorStop(<span class="number">0</span>,<span class="string">'#0a0a0a'</span>);</span><br><span class="line">        gradient.addColorStop(<span class="number">1</span>,<span class="string">'#636766'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 白子</span></span><br><span class="line">        gradient.addColorStop(<span class="number">0</span>,<span class="string">'#d1d1d1'</span>);</span><br><span class="line">        gradient.addColorStop(<span class="number">1</span>,<span class="string">'#f9f9f9'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    context.fillStyle = gradient;</span><br><span class="line">    context.fill();</span><br><span class="line">    <span class="comment">// 每次落子完成后都要判断下输赢</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.checkReferee(x,y,isBlack ? <span class="number">1</span> : <span class="number">2</span>);</span><br><span class="line">    &#125;,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何下去呢？上面已将打好基础了，在点击棋盘的时候，顺便记录下矩阵上点的位置，如<code>(0,1),(3,1)</code>等位置，然后将绘制好的相应棋子填充在相应的位置就可以了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 落子</span></span><br><span class="line">listenDownChessman() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'落子'</span>);</span><br><span class="line">    <span class="keyword">this</span>.chessboard.onclick = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取棋子的位置(x,y) =&gt; (0,1)</span></span><br><span class="line">       <span class="keyword">let</span> &#123;</span><br><span class="line">           offsetX: x,</span><br><span class="line">           offsetY: y</span><br><span class="line">       &#125; = event;</span><br><span class="line">       x = <span class="built_in">Math</span>.round((x<span class="number">-15</span>) / <span class="keyword">this</span>.lattice.width);</span><br><span class="line">       y = <span class="built_in">Math</span>.round((y<span class="number">-15</span>) / <span class="keyword">this</span>.lattice.height);</span><br><span class="line">        <span class="comment">//    console.log(x , y)</span></span><br><span class="line">       <span class="comment">// 空的位置才可以落子</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">this</span>.checkerboard[x][y] !== <span class="literal">undefined</span> &amp;&amp; <span class="built_in">Object</span>.is(<span class="keyword">this</span>.checkerboard[x][y] , <span class="number">0</span>))&#123;</span><br><span class="line">            <span class="comment">// 落子后更新矩阵,切换角色，并且记录</span></span><br><span class="line">            <span class="keyword">this</span>.checkerboard[x][y] = <span class="keyword">this</span>.role;</span><br><span class="line">            <span class="comment">// 刻画棋子</span></span><br><span class="line">            <span class="keyword">this</span>.drawChessman(x,y,<span class="built_in">Object</span>.is(<span class="keyword">this</span>.role , <span class="number">1</span>));</span><br><span class="line">            <span class="comment">// 落子完之后有可能悔棋之后落子，这种情况下应该重置历史记录</span></span><br><span class="line">            <span class="keyword">this</span>.history.length = <span class="keyword">this</span>.currentStep;</span><br><span class="line">            <span class="keyword">this</span>.history.push(&#123;</span><br><span class="line">                x,</span><br><span class="line">                y,</span><br><span class="line">                role: <span class="keyword">this</span>.role</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 保存坐标，切换角色和保存快照</span></span><br><span class="line">            <span class="keyword">this</span>.currentStep++;</span><br><span class="line">            <span class="keyword">this</span>.role = <span class="built_in">Object</span>.is(<span class="keyword">this</span>.role , <span class="number">1</span>) ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="悔棋"><a href="#悔棋" class="headerlink" title="悔棋"></a>悔棋</h2><p>实现悔棋，也就是撤销画布的棋子，这里采取重新绘制覆盖已有的棋子方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 销毁棋子</span></span><br><span class="line">minusStep(x,y) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;options&#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123;count&#125; = options.gobangStyle;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">this</span>.chessboard.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    context.clearRect(x * <span class="number">30</span>, y * <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="comment">// 重画该圆周围的格子,对边角的格式进行特殊的处理</span></span><br><span class="line">    <span class="keyword">if</span>(x&lt;=<span class="number">0</span> &amp;&amp; y &lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fixchessboard(<span class="number">15</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">30</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">30</span>,<span class="number">15</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;=count<span class="number">-1</span> &amp;&amp; y&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fixchessboard(count*<span class="number">30</span><span class="number">-15</span>,<span class="number">15</span>,count*<span class="number">30</span><span class="number">-30</span>,<span class="number">15</span>,count*<span class="number">30</span><span class="number">-15</span>,<span class="number">15</span>,count*<span class="number">30</span><span class="number">-15</span>,<span class="number">30</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(y&gt;=count<span class="number">-1</span> &amp;&amp; x &lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fixchessboard(<span class="number">15</span>,count*<span class="number">30</span><span class="number">-15</span>,<span class="number">15</span>,count*<span class="number">30</span><span class="number">-30</span>,<span class="number">15</span>,count*<span class="number">30</span><span class="number">-15</span>,<span class="number">30</span>,count*<span class="number">30</span><span class="number">-15</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;=count<span class="number">-1</span> &amp;&amp; y &gt;= count<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fixchessboard(count*<span class="number">30</span><span class="number">-15</span>,count*<span class="number">30</span><span class="number">-15</span>,count*<span class="number">30</span><span class="number">-30</span>,count*<span class="number">30</span><span class="number">-15</span>,count*<span class="number">30</span><span class="number">-15</span>,count*<span class="number">30</span><span class="number">-15</span>,count*<span class="number">30</span><span class="number">-15</span>,count*<span class="number">30</span><span class="number">-30</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x &lt;=<span class="number">0</span> &amp;&amp; y &gt;<span class="number">0</span> &amp;&amp; y &lt;count<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fixchessboard(<span class="number">15</span>,<span class="number">30</span>*y+<span class="number">15</span>,<span class="number">30</span>,<span class="number">30</span>*y+<span class="number">15</span>,<span class="number">15</span>,<span class="number">30</span>*y,<span class="number">15</span>,<span class="number">30</span>*y+<span class="number">30</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(y &lt;= <span class="number">0</span> &amp;&amp; x &gt; <span class="number">0</span> &amp;&amp; x &lt; count<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fixchessboard(x*<span class="number">30</span>+<span class="number">15</span>,<span class="number">15</span>,x*<span class="number">30</span>+<span class="number">15</span>,<span class="number">30</span>,x*<span class="number">30</span>,<span class="number">15</span>,x*<span class="number">30</span>+<span class="number">30</span>,<span class="number">15</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;=count<span class="number">-1</span> &amp;&amp; y &gt;<span class="number">0</span> &amp;&amp; y &lt; count<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fixchessboard(count*<span class="number">30</span><span class="number">-15</span>,y*<span class="number">30</span>+<span class="number">15</span>,count*<span class="number">30</span><span class="number">-30</span>,y*<span class="number">30</span>+<span class="number">15</span>,count*<span class="number">30</span><span class="number">-15</span>,y*<span class="number">30</span>,count*<span class="number">30</span><span class="number">-15</span>,y*<span class="number">30</span>+<span class="number">30</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(y&gt;=count<span class="number">-1</span> &amp;&amp; x &gt; <span class="number">0</span> &amp;&amp; x &lt; count<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fixchessboard(x*<span class="number">30</span>+<span class="number">15</span>,count*<span class="number">30</span><span class="number">-15</span>,x*<span class="number">30</span>+<span class="number">15</span>,count*<span class="number">30</span><span class="number">-30</span>,x*<span class="number">30</span>,count*<span class="number">30</span><span class="number">-15</span>,x*<span class="number">30</span>+<span class="number">30</span>,count*<span class="number">30</span><span class="number">-15</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fixchessboard(<span class="number">15</span>+x*<span class="number">30</span>,y*<span class="number">30</span>,<span class="number">15</span>+x*<span class="number">30</span>,y*<span class="number">30</span> + <span class="number">30</span>,x*<span class="number">30</span>,y*<span class="number">30</span>+<span class="number">15</span>,(x+<span class="number">1</span>)*<span class="number">30</span>,y*<span class="number">30</span>+<span class="number">15</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修补删除后的棋盘</span></span><br><span class="line">fixchessboard (a , b, c , d , e , f , g , h)&#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">this</span>.chessboard.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.moveTo(a , b);</span><br><span class="line">    context.lineTo(c , d);</span><br><span class="line">    context.moveTo(e, f);</span><br><span class="line">    context.lineTo(g , h);</span><br><span class="line">    context.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在进行简单的功能开发之后，就可以简单的玩下小游戏了，放出<code>gif demo 图</code>:</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/talk-about-gobang-game/gobang_demo.gif" alt="frontend/talk-about-gobang-game/gobang_demo"></p><p>如有要改善的点，欢迎留言改进。相关的详细代码，请前往我的仓库<a href="https://github.com/reng99/demos/tree/master/src/gobang" target="_blank" rel="noopener">gobang部分内容</a>。如果能留下一颗小星星就更好了。</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/talk-about-gobang-game/qiaoba.png" alt="frontend/talk-about-gobang-game/qiaoba"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/talk-about-gobang-game/banner.jpg&quot; alt=&quot;frontend/talk-about-gobang-game/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;闲来无事，记录下自己完成的五子棋，纯前端实现，使用到的知识点是canvas和类。运行的时候请使用谷歌浏览器哈➡️&lt;a href=&quot;http://reng99.cc/demos/src/gobang/&quot;&gt;休闲游戏–五子棋&lt;/a&gt;😊 &lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="游戏" scheme="http://reng99.cc/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>Take Care of Your Emotion to Parent</title>
    <link href="http://reng99.cc/2018/09/06/emotions-to-your-parent/"/>
    <id>http://reng99.cc/2018/09/06/emotions-to-your-parent/</id>
    <published>2018-09-06T05:56:57.000Z</published>
    <updated>2018-09-06T06:02:26.773Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>something relatived will be added.</p></blockquote><a id="more"></a><blockquote><p>please wait for more information.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;something relatived will be added.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="诗和远方" scheme="http://reng99.cc/categories/%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9/"/>
    
    
      <category term="杂谈" scheme="http://reng99.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式汇总</title>
    <link href="http://reng99.cc/2018/08/29/regexp-summary/"/>
    <id>http://reng99.cc/2018/08/29/regexp-summary/</id>
    <published>2018-08-29T06:10:00.000Z</published>
    <updated>2018-09-10T15:50:46.257Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/regexp-summary/banner.jpg" alt="frontend/regexp-summary/banner"></p><p>正则表达式是对<strong>字符串</strong>操作的一种逻辑方式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个<code>规则字符串</code>，这个<code>规则字符串</code>用来表达对字符串的一种过滤逻辑。</p><a id="more"></a><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p> 元字符使正则表达式具有处理能力。所谓元字符就是指那些在正则表达式中<strong>具有特殊意义的专用字符</strong>，可以用来规定其前导字符（即位于元字符前面的字符）在目标对象中的出现模式。元字符是一个或一组代替一个或多个字符的字符。</p><p> 元字符有那些请参考<a href="http://www.runoob.com/regexp/regexp-metachar.html" target="_blank" rel="noopener">正则表达式-元字符|菜鸟教程</a></p><p>需要注意的几个：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">(pattern)</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">(?:pattern)</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">(?=pattern)</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">(?!pattern)</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">(?&lt;=pattern)</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">(?&lt;!pattern)</td><td style="text-align:center">-</td></tr></tbody></table><blockquote><p>有待补充</p></blockquote><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>正则表达式从左到右进行计算，并遵循优先级顺序。</p><p>相同优先级的从左到右进行运算，不同优先级的运算先高后低。下表展示了从高到低的优先级顺序：</p><table class="table table-bordered table-striped table-condensed"><br>    <tr><br>       <th>运算符</th><br>        <th>描述</th><br>    </tr><br>    <tr><br>        <td>\</td><br>        <td>转义字符</td><br>    </tr><br>    <tr><br>        <td>(),(?:),(?=),[]</td><br>        <td>圆括号和方括号</td><br>    </tr><br>    <tr><br>        <td>*,+,?,{n},{n,},{n,m}</td><br>        <td>限定符</td><br>    </tr><br>    <tr><br>        <td>^,$,\任何字符、任何字符</td><br>        <td>点位点和序列（即：位置和顺序）</td><br>    </tr><br>    <tr><br>        <td>|</td><br>        <td>替换，“或”操作。字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”。</td><br>    </tr><br></table><h2 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h2><blockquote><p>有待补充</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/regexp-summary/banner.jpg&quot; alt=&quot;frontend/regexp-summary/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;正则表达式是对&lt;strong&gt;字符串&lt;/strong&gt;操作的一种逻辑方式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个&lt;code&gt;规则字符串&lt;/code&gt;，这个&lt;code&gt;规则字符串&lt;/code&gt;用来表达对字符串的一种过滤逻辑。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="正则" scheme="http://reng99.cc/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>关联github发布项目</title>
    <link href="http://reng99.cc/2018/08/28/relative-github-deploy/"/>
    <id>http://reng99.cc/2018/08/28/relative-github-deploy/</id>
    <published>2018-08-28T05:17:17.000Z</published>
    <updated>2018-08-30T02:26:40.087Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/linux/relative-github-deploy/banner.jpg" alt="linux/relative-github-deploy/banner"></p><p>发布的工作我们之前有简单的说过–<a href="http://reng99.cc/2018/08/19/static-website-deploy/">部署静态站点</a>，但是只是本地托管资源很是麻烦，换了机器就不能够及时发布了。我们这里使用<code>github</code>来托管代码【其实，gitlab啊、码云啊都可以的啦】，利于发布。</p><a id="more"></a><p>本操作是在root权限上操作。</p><h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><p>我这里的服务器是<code>centos</code>，安装git一条命令行就搞定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install git</span><br></pre></td></tr></table></figure><p>验证git是否安装成功，可以通过<code>git --version</code>查看。</p><h2 id="关联github"><a href="#关联github" class="headerlink" title="关联github"></a>关联github</h2><p>因为本地git仓库和<code>github</code>仓库之间的传输是通过<strong>SSH</strong>加密传输的，<code>GITHUB</code>需要识别是否是你推送的，github只要知道你的公钥（具体为什么不在讨论范围内），就可以确认只有你自己才能推送，所以需要配置<code>ssh key</code>。</p><h3 id="生成SSH密钥对"><a href="#生成SSH密钥对" class="headerlink" title="生成SSH密钥对"></a>生成SSH密钥对</h3><p>生成如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"123@qq.com"</span> <span class="comment"># 123@qq.com是你注册github的邮箱</span></span><br></pre></td></tr></table></figure><p>输入上面的命令行之后一路回车就可以了，然后出现下面的图，说明你已经生成好了：</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/relative-github-deploy/generate-sshkey.png" alt="linux/relative-github-deploy/generate-sshkey"></p><h3 id="添加公钥到github上"><a href="#添加公钥到github上" class="headerlink" title="添加公钥到github上"></a>添加公钥到github上</h3><p>先进入公钥的文件将公钥的内容复制下来备用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line"><span class="comment"># authorized_keys  id_rsa  id_rsa.pub</span></span><br><span class="line"></span><br><span class="line">$ cat id_rsa.pub</span><br><span class="line"><span class="comment"># 将其内容复制</span></span><br></pre></td></tr></table></figure><p>登陆你的github，进入<strong><a href="https://github.com/settings/keys" target="_blank" rel="noopener">https://github.com/settings/keys</a></strong>操作：</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/relative-github-deploy/add-github-pubkey01.png" alt="linux/relative-github-deploy/add-github-pubkey01"></p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/relative-github-deploy/add-github-pubkey02.png" alt="linux/relative-github-deploy/add-github-pubkey02"></p><p>然后验证是否关联成功:</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/relative-github-deploy/verify-sshkey.png" alt="linux/relative-github-deploy/verify-sshkey"></p><h3 id="设置username和email"><a href="#设置username和email" class="headerlink" title="设置username和email"></a>设置username和email</h3><p>设置username和email，因为github每次的commit都会记录他们：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name  <span class="string">"name"</span> <span class="comment"># 你的GitHub登陆名</span></span><br><span class="line">$ git config --global user.email <span class="string">"123@qq.com"</span> <span class="comment"># 你的GitHub注册邮箱</span></span><br></pre></td></tr></table></figure><h3 id="删除SSH密钥对"><a href="#删除SSH密钥对" class="headerlink" title="删除SSH密钥对"></a>删除SSH密钥对</h3><p>既然讲到了安装，顺便说下如何删除吧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录（安装ssh才会有）</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 罗列如下</span></span><br><span class="line">$ ls</span><br><span class="line">authorized_keys  id_rsa  id_rsa.pub</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除存在的id_rsa、id_rsa.pub即可</span></span><br><span class="line">$ rm -rf id_rsa</span><br><span class="line">$ rm -rf id_rsa.pub</span><br></pre></td></tr></table></figure><h2 id="git更新代码"><a href="#git更新代码" class="headerlink" title="git更新代码"></a>git更新代码</h2><p>在服务器关联好github后，我们来个简单的demo来实现下更新代码：</p><h3 id="github上创建仓库"><a href="#github上创建仓库" class="headerlink" title="github上创建仓库"></a>github上创建仓库</h3><p>我在github上创建创建了一个名为test的仓库【后期会删除本测试仓库】，里面只有一个<code>index.html</code>文件，如下：</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/relative-github-deploy/test-repository.png" alt="linux/relative-github-deploy/test-repository"></p><h3 id="服务器拉取github代码"><a href="#服务器拉取github代码" class="headerlink" title="服务器拉取github代码"></a>服务器拉取github代码</h3><p>进入linux服务器的站点根目录，首次运行的使用需要将代码<code>clone</code>到根目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入站点根目录</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将仓库clone下来</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/reng99/test.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时根目录下就有test文件夹了</span></span><br><span class="line">$ ls</span><br><span class="line"><span class="built_in">test</span> ...</span><br></pre></td></tr></table></figure><p>访问测试的项目如下：</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/relative-github-deploy/verify-test-project.png" alt="linux/relative-github-deploy/verify-test-project"></p><p>至此，服务器关联github已经完成。以后项目有更新，进行相关的git操作即可，感兴趣的话可以了解我之前写的<a href="http://reng99.cc/2017/12/13/git-learning/">git的学习汇总</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/linux/relative-github-deploy/banner.jpg&quot; alt=&quot;linux/relative-github-deploy/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;发布的工作我们之前有简单的说过–&lt;a href=&quot;http://reng99.cc/2018/08/19/static-website-deploy/&quot;&gt;部署静态站点&lt;/a&gt;，但是只是本地托管资源很是麻烦，换了机器就不能够及时发布了。我们这里使用&lt;code&gt;github&lt;/code&gt;来托管代码【其实，gitlab啊、码云啊都可以的啦】，利于发布。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://reng99.cc/categories/linux/"/>
    
    
      <category term="部署" scheme="http://reng99.cc/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="git" scheme="http://reng99.cc/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>部署动态站点</title>
    <link href="http://reng99.cc/2018/08/27/dynamic-website-deploy/"/>
    <id>http://reng99.cc/2018/08/27/dynamic-website-deploy/</id>
    <published>2018-08-27T14:49:26.000Z</published>
    <updated>2018-08-27T15:02:42.643Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/linux/dynamic-website-deploy/banner.jpg" alt="linux/dynamic-website-deploy/banner"></p><p>之前有讲过<a href="http://reng99.cc/2018/08/19/static-website-deploy/">部署静态站点</a>，一些官网，个人博客等等小型的，没有和数据进行交互的内容是比较适合静态部署。但是，大多数的时候是要和用户进行交互和数据的存储的，这就要开发动态的站点了。本文并不讲怎么开发一个动态的站点，而是说怎么部署一个动态的站点，这里使用node开发的一个项目为例。</p><a id="more"></a><blockquote><p>有待补充</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/linux/dynamic-website-deploy/banner.jpg&quot; alt=&quot;linux/dynamic-website-deploy/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前有讲过&lt;a href=&quot;http://reng99.cc/2018/08/19/static-website-deploy/&quot;&gt;部署静态站点&lt;/a&gt;，一些官网，个人博客等等小型的，没有和数据进行交互的内容是比较适合静态部署。但是，大多数的时候是要和用户进行交互和数据的存储的，这就要开发动态的站点了。本文并不讲怎么开发一个动态的站点，而是说怎么部署一个动态的站点，这里使用node开发的一个项目为例。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://reng99.cc/categories/linux/"/>
    
    
      <category term="部署" scheme="http://reng99.cc/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>部署静态站点</title>
    <link href="http://reng99.cc/2018/08/19/static-website-deploy/"/>
    <id>http://reng99.cc/2018/08/19/static-website-deploy/</id>
    <published>2018-08-19T14:17:06.000Z</published>
    <updated>2018-08-26T16:00:23.215Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/banner.jpg" alt="linux/static-website-deploy/banner"></p><blockquote><p>将静态资源部署到服务器上面</p></blockquote><a id="more"></a><p>本博文是在centOS系统上进行操作的，如图：</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/centOS-detail.png" alt="linux/static-website-deploy/centOS-detail"></p><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>从零开始讲解nginx的安装等内容…</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>为了证明我这是从零开始安装nginx的【全程在root下安装】，我特意卸载了之前安装的nginx<code>yum remove nginx</code>，查看nginx的版本就如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br><span class="line">bash: /usr/sbin/nginx: No such file or directory</span><br></pre></td></tr></table></figure><p>下面进行nginx的安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索，yum源没有nginx源</span></span><br><span class="line">yum search nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加CentOS 7 Nginx yum资源库</span></span><br><span class="line">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">sudo yum install -y nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nginx版本，这里打印出 nginx version: nginx/1.14.0</span></span><br><span class="line">nginx -v</span><br></pre></td></tr></table></figure><h3 id="nginx的几个默认目录"><a href="#nginx的几个默认目录" class="headerlink" title="nginx的几个默认目录"></a>nginx的几个默认目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx /usr/share/man/man8/nginx.8.gz</span><br></pre></td></tr></table></figure><blockquote><p>执行目录：/usr/sbin/nginx</p><p>模块所在的目录：/usr/lib64/nginx/modules</p><p>配置所在目录：/etc/nginx/</p><p>默认的站点目录： /usr/share/nginx/html</p></blockquote><p><strong>其他重要：</strong></p><blockquote><p>主要配置文件：  /usr/share/nginx.conf 指向： /etc/nginx/conf.d/default.conf</p><p>PID目录： /var/run/nginx.pid</p><p>错误日志：/var/log/nginx/error.log</p><p>访问日志： /var/log/nginx/access.log</p></blockquote><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><strong>1.启动nginx</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx start <span class="comment"># 会重定向到执行命令 systemctl start nginx.service</span></span><br><span class="line">Redirecting to /bin/systemctl start nginx.service</span><br></pre></td></tr></table></figure><p>启动nginx后，访问centos服务器的地址，你会看到下面的截图的内容，说明你已经安装成功!</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/nginx-install-successful.png" alt="linux/static-website-deploy/nginx-install-successful"></p><p><strong>2.停止nginx</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx stop <span class="comment"># 会重定向到执行命令 systemctl stop nginx.service</span></span><br><span class="line">Redirecting to /bin/systemctl stop nginx.service</span><br></pre></td></tr></table></figure><p><strong>3.查看nginx的状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx status <span class="comment"># 会重定向到执行命令systemctl status nginx.service</span></span><br><span class="line">Redirecting to /bin/systemctl status nginx.service</span><br></pre></td></tr></table></figure><p>未开启nginx时候查看状态显示的内容如下:</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/nginx-status-stop.png" alt="linux/static-website-deploy/nginx-status-stop"></p><p>开启nginx之后，查看状态时候显示如下：</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/nginx-status-start.png" alt="linux/static-website-deploy/nginx-status-start"></p><p><strong>4.重载nginx</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service nginx reload <span class="comment"># 会重定向到执行命令systemctl reload nginx.service</span></span><br><span class="line">Redirecting to /bin/systemctl reload nginx.service</span><br><span class="line"></span><br><span class="line">重载命令要在nginx已经启动的时候进行哦，不然会提示Job <span class="keyword">for</span> nginx.service invalid.</span><br></pre></td></tr></table></figure><h3 id="杀掉进程"><a href="#杀掉进程" class="headerlink" title="杀掉进程"></a>杀掉进程</h3><p><strong>1.相关nginx进行全部杀掉</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall -9 nginx</span><br></pre></td></tr></table></figure><p>刚开始安装nginx的时候，就遇到地址占用的情况，使用上面的命令顺利解决后重新启动nginx。</p><p> <img src="http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/address-in-use.png" alt="linux/static-website-deploy/address-in-use"></p><p><strong>2.把PID的两个进程杀掉</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 pidNum1 and <span class="built_in">kill</span> -9 pidNum2</span><br></pre></td></tr></table></figure><p>当然，这里需要你知道要<code>kill</code>掉那个<code>进程id</code>了，这里就不展开说了，有兴趣可以百度百科哈。</p><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><blockquote><p><code>nginx</code>配置文件有自己的格式，文件格式比较简单，看起来像是<code>css文件（sass或less编写方式）</code>–&gt; 先指定变量名，然后再花括号内编写指令，最顶层是<strong>server</strong>。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80; <span class="comment"># 声明服务器监听的端口号</span></span><br><span class="line">server_name example.com; <span class="comment"># 匹配url地址</span></span><br><span class="line">root /var/www/example; <span class="comment"># 这个是托管静态资源最关键的部分，指明其存放的目录和路径</span></span><br><span class="line">location / &#123;</span><br><span class="line"><span class="comment"># location接受两个参数，一个字符串或者正则和一段代码。</span></span><br><span class="line"><span class="comment"># 字符串或者正则用于匹配某个特定的目录</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 更多 <a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">http://nginx.org/en/docs/</a></p><h2 id="上传静态资源"><a href="#上传静态资源" class="headerlink" title="上传静态资源"></a>上传静态资源</h2><p>嗯，上面已经介绍了一丢丢的nginx的相关知识，下面进行静态资源上传啦～</p><h3 id="服务器上代码的修改"><a href="#服务器上代码的修改" class="headerlink" title="服务器上代码的修改"></a>服务器上代码的修改</h3><p>这里的资源存放目录上面已经讲过了，在<code>/usr/share/nginx/html</code>目录下面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入root状态后操作，这里省略</span></span><br><span class="line">.</span><br><span class="line"><span class="comment"># 进入根目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看目录</span></span><br><span class="line">ls</span><br><span class="line">50x.html  index.html <span class="comment"># 这里只有50x页面和入口页面</span></span><br></pre></td></tr></table></figure><p>之后的操作就是使用相关的命令进行文件的内容修改和资源的添加了，比如操作<code>index.html</code>，使用<code>vim index.html</code>等。</p><p>哈哈哈，小改动这样直接在服务器上面进行修改还是可以接受的，如果比较大的改动和考虑到版本的添加等问题，那就非常非常不明智了@～@</p><h3 id="本地写好上传"><a href="#本地写好上传" class="headerlink" title="本地写好上传"></a>本地写好上传</h3><p>可以在本地建好测试通过的项目，再进行上传哈。这里我下载了一个<a href="https://www.vandyke.com/products/securecrt/mac_osx.html" target="_blank" rel="noopener">SecureCRT</a>【一款支持SSH(SSH1和SSH2)的终端仿真程序】。嗯，链接好的远程服务器就可以了。之后，首先,要是服务器不支持rz命令的话,需要安装执行yum-yinstalllrzsz2、再输入rz-be命令,选择需要上传的本地文件。</p><ol><li>首先，要是服务器不支持rz命令的话，需要安装执行</li></ol><p><code>yum -y install lrzsz</code></p><ol><li>再输入<code>rz -be</code>命令，选择需要上传的本地文件</li></ol><p>我这里事先在本地桌面新建了个静态文件<code>test/index.html</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;demo&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">html,body&#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">h1&#123;</span><br><span class="line">text-align: center;</span><br><span class="line">margin-top: 80px;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;测试成功@~@&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>然后我就上传了啊：</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/upload-file.png" alt="linux/static-website-deploy/upload-file"></p><p>可是，提示错误了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Transferring index.html...</span><br><span class="line">index.html was skipped</span><br></pre></td></tr></table></figure><p>跳过了我的<code>index.html</code>文件，是权限问题嘛，我可是在<code>root</code>啊。为了验证不是这个问题，我执行了<code>sudo rz -be</code>，结果还是提示上面的那个错误。</p><p>既然是跳过<code>index.html</code>文件，而且又不是权限问题，那么就是不能自动覆盖同名文件了，执行了<code>rm -rf index.html</code>后，再跑一次<code>rz -be</code>选中文件上传，成功了，美滋滋！</p><p>访问到的页面如下（确定你开了nginx哦）：</p><p><img src="http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/access-index.png" alt="linux/static-website-deploy/access-index"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/linux/static-website-deploy/banner.jpg&quot; alt=&quot;linux/static-website-deploy/banner&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将静态资源部署到服务器上面&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="linux" scheme="http://reng99.cc/categories/linux/"/>
    
    
      <category term="部署" scheme="http://reng99.cc/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>自适应布局</title>
    <link href="http://reng99.cc/2018/08/14/adaptability-layout/"/>
    <id>http://reng99.cc/2018/08/14/adaptability-layout/</id>
    <published>2018-08-14T11:14:48.000Z</published>
    <updated>2018-08-23T13:16:51.136Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/adaptability-layout/banner.jpg" alt="frontend/css/adaptability-layout/banner"></p><p>在进入整体之前，有诸多的概念需要了解一下，比如物理像素等等。在理解相关的概念的基础上，我们才能在适配上游刃有余。</p><a id="more"></a><h2 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h2><p>在同一个设备上，它的物理像素个数是固定的，这是厂商在出厂时就设置好了的–即一个设备的分辨率是固定的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/css/adaptability-layout/banner.jpg&quot; alt=&quot;frontend/css/adaptability-layout/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;在进入整体之前，有诸多的概念需要了解一下，比如物理像素等等。在理解相关的概念的基础上，我们才能在适配上游刃有余。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="http://reng99.cc/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>关于BFC理解</title>
    <link href="http://reng99.cc/2018/08/12/about-BFC/"/>
    <id>http://reng99.cc/2018/08/12/about-BFC/</id>
    <published>2018-08-12T04:19:10.000Z</published>
    <updated>2018-08-12T15:09:19.462Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/bfc/banner.jpg" alt="frontend/css/bfc/banner"></p><p>BFC(Block Formatting Context，块格式上下文)是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。对其的理解能够帮你更好的布局页面。</p><a id="more"></a><h2 id="常见的定位方案"><a href="#常见的定位方案" class="headerlink" title="常见的定位方案"></a>常见的定位方案</h2><p>在进入BFC话题前，先来捋一下常见的定位方案，定位方案是控制元素的布局，主要有三种常见的方案：</p><h3 id="普通流-正常文档流"><a href="#普通流-正常文档流" class="headerlink" title="普通流(正常文档流)"></a>普通流(正常文档流)</h3><p>在普通流中，元素按照其在HTML的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是流定位。也可以说，普通流中元素的位置由该元素在HTML文档中的位置决定。</p><p>额外：⚠️</p><p>HTML中，元素可以分成块级元素（block-level elements）和行内元素（inline-level elements）。具体的解析会另开一篇博文出来讲解。</p><p>下面给出普通流的一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>first<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>second<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo demo1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo demo2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo1</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo2</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/bfc/normal-flow.png" alt="frontend/css/bfc/normal-flow"></p><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>在浮动布局中，元素首先按照<strong>普通流</strong>的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果和印刷排版中的文本环绕相似。如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dotted red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/bfc/float-flow-img.png" alt="frontend/css/bfc/float-flow-img"></p><p>⚠️为什会内容环绕呢，而不是跟浮动元素重合呢？</p><p>《CSS权威指南》中指出，浮动的目的，最初只能用于图像，的就是为了允许其他内容（如文本）“围绕”该图像。而后来的CSS允许浮动任何元素。</p><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>在绝对定位布局中，元素会整体脱离普通流（浮动布局可以理解成脱离父元素文本流），因此绝对定位不会对其兄弟元素造成影响，而具体的位置由绝对定位的坐标决定。</p><h2 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h2><p>Formatting context（格式上下文）是W3C CSS2.1规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p><p>BFC即Block Formatting Content（块级格式上下文），它属于上述定位方案的<strong>普通流</strong>。具有BFC特性的元素可以看作是<strong>隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且BFC具有普通容器所没有的一些特性。</strong>后面介绍。</p><p>简单来说，可以把BFC理解成一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部的元素。</p><h2 id="触发BFC的条件"><a href="#触发BFC的条件" class="headerlink" title="触发BFC的条件"></a>触发BFC的条件</h2><p>下面的方式会创建<strong>块格式上下文</strong>：</p><ul><li>根元素或包含根元素的元素，这里我理解为body元素</li><li>浮动元素（元素的<code>float</code>不是<code>none</code>）</li><li>绝对定位元素（元素的<code>position</code>为<code>absolute</code>或<code>fixed</code>）</li><li>行内块元素（元素的<code>display</code>为<code>inline-block</code>）</li><li>表格单元格（元素的<code>display</code>为<code>table-cell</code>，html表格单元格默认为该值）</li><li>表格标题（元素的<code>display</code>为<code>table-caption</code>，html表格标题默认为该值）</li><li>匿名表格单元格元素（元素的<code>display</code>为<code>table</code>、<code>table-row</code>、<code>table-row-group</code>、<code>table-header-group</code>、<code>table-footer-group</code>（分别是html table、row、tbody、thead、tfoot的默认属性）或<code>inline-table</code>）</li><li><code>overflow</code>值不为visible的块元素</li><li><code>display</code>值为<code>flow-root</code>的元素</li><li><code>contain</code>值为<code>layout、content或strict</code>的元素</li><li>弹性元素（<code>display</code>为<code>flex</code>或<code>inline-flex</code>元素的直接子元素）</li><li>网格元素（<code>display</code>为<code>grid</code>或<code>inline-grip</code>元素的直接子元素）</li><li>多列容器（元素的<code>column-count</code>或<code>column-width</code>不为<code>auto</code>，包括<code>column-count</code>为1）</li><li><code>column-span</code>为<code>all</code>的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中</li></ul><p>创建了<strong>块格式上下文</strong>的元素中的所有内容都会被包含在BFC中。以上的创建方式参考自<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">块格式化上下文</a></p><h2 id="BFC的特性（作用）"><a href="#BFC的特性（作用）" class="headerlink" title="BFC的特性（作用）"></a>BFC的特性（作用）</h2><p>简单罗列下BFC的特性：</p><ol><li>内部的box会在垂直方向，从顶部开始一个接一个地放置</li><li>box<strong>垂直方向</strong>的距离由margin决定。属于同一个BFC的两个相邻的box的margin会发生叠加，结果值并集</li><li>在BFC中，每个盒子的左外边缘（margin-left）会触碰到容器的左边缘（border-left）。（对于从右到左的格式来说，则触碰到右边缘），即使是浮动也是如此。<strong>即不会发生margin穿透</strong>。</li><li>形成了BFC的区域不会与float box重叠（可阻止因浮动元素引发的文字环绕现象）</li><li>计算BFC高度时，浮动元素也参与计算（BFC会确切包含浮动的子元素，即闭合浮动）</li></ol><p>注意⚠️，对于第五点，原本浮动元素是应该脱离文档流的，但是BFC中会计算其高度。</p><h2 id="BFC的一些应用"><a href="#BFC的一些应用" class="headerlink" title="BFC的一些应用"></a>BFC的一些应用</h2><h3 id="实现自适应的两栏布局"><a href="#实现自适应的两栏布局" class="headerlink" title="实现自适应的两栏布局"></a>实现自适应的两栏布局</h3><p>应用了<strong>第四点BFC的区域不会与float box重叠</strong>的特性。一边浮动，另一边自适应的部分形成BFC，那么两者就不会重叠，避免了文字环绕及类似情形。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden; <span class="comment">/*把.right这个自适应的box变成BFC，避免与.left box这个有float属性的元素重叠*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/bfc/responsive-two-column.gif" alt="frontend/css/bfc/responsive-two-column"></p><h3 id="解决父元素高度塌陷"><a href="#解决父元素高度塌陷" class="headerlink" title="解决父元素高度塌陷"></a>解决父元素高度塌陷</h3><p>高度塌陷产生的原因：<strong>父元素未设置固定的高度，完全由子元素高度撑开；当子元素float之后脱离了文档流，父元素内部就没有支撑，造成了高度的塌陷</strong>。</p><p>解决这种问题我上之前的博文中有总结，地址请戳<a href="http://reng99.cc/2018/07/03/clear-float/">CSS清除浮动</a>。这里再简单的说下原理：</p><p>也就是用到了BFC的<strong>特性五：闭合内部浮动</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden; <span class="comment">/*形成BFC，使其能闭合浮动 box*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="margin重叠解决"><a href="#margin重叠解决" class="headerlink" title="margin重叠解决"></a>margin重叠解决</h3><p>在正常的文档流中，在垂直方向上兄弟box的margin会取交集（取最大的显示），为神马会出现这种情况呢？可以说是一种bug，也可以说是一种规范。我比较倾向于后者。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/bfc/margin-vertical-before.png" alt="frontend/css/bfc/margin-vertical-before"></p><p>上面出现的情况是BFC的<strong>特性三：属于同一个BFC的两个相邻的box的margin会发生叠加，结果值并集</strong>。那么，我们将他们隔离成不同的BFC不久解决问题了嘛。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'wrap'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden; <span class="comment">/*将.top box包含在另外一个BFC中隔离开*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/bfc/margin-vertical-after.png" alt="frontend/css/bfc/margin-vertical-after"></p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>使用好BFC能够是你更好的布局。文中部分内容参考网络内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/css/bfc/banner.jpg&quot; alt=&quot;frontend/css/bfc/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;BFC(Block Formatting Context，块格式上下文)是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。对其的理解能够帮你更好的布局页面。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="http://reng99.cc/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>固定页脚的方法</title>
    <link href="http://reng99.cc/2018/08/02/fixed-footer-methods/"/>
    <id>http://reng99.cc/2018/08/02/fixed-footer-methods/</id>
    <published>2018-08-02T12:37:18.000Z</published>
    <updated>2018-08-02T13:52:20.968Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/fixed-footer-methods/banner.jpg" alt="frontend/css/fixed-footer-methods/banner"></p><p>在页面的开发过程中，会遇到屏幕的内容比较少，那么如果按照传统的布局的话，页脚就会上移，造成页脚底部有空余的空间，很不是美观。那么，我们应该进行相关的处理，使得内容较少的时候，页脚是固定在页面的底部的。</p><a id="more"></a><p>下面针对存css和javascript与css结合给出下面的几种方法：</p><h2 id="使用margin-bottom为负数"><a href="#使用margin-bottom为负数" class="headerlink" title="使用margin-bottom为负数"></a>使用margin-bottom为负数</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">content</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;  </span><br><span class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">50px</span>; <span class="comment">/* 等于footer的高度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span>, <span class="selector-class">.push</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>div.wrapper的margin-bottom需要和div.footer的-height值一样，注意是负height</p><h2 id="将页脚的margin-top设为负数"><a href="#将页脚的margin-top设为负数" class="headerlink" title="将页脚的margin-top设为负数"></a>将页脚的margin-top设为负数</h2><p>给内容外增加父元素，并将内容部分的<code>padding-bottom</code>与页脚的<code>height</code>相等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-inside"</span>&gt;</span></span><br><span class="line">    content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content-inside</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用calc-计算"><a href="#使用calc-计算" class="headerlink" title="使用calc()计算"></a>使用calc()计算</h2><p><code>calc()</code>函数用于动态计算长度值。<a href="http://www.runoob.com/cssref/func-calc.html" target="_blank" rel="noopener">传送门</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="built_in">calc</span>(100vh - 70px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用flexbox弹性盒布局"><a href="#使用flexbox弹性盒布局" class="headerlink" title="使用flexbox弹性盒布局"></a>使用flexbox弹性盒布局</h2><p>上面的几种方法的<code>footer</code>高度都是固定的，如果其内容过多的话就会破坏布局的，比较友好的有以下的解决：flex和grid。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用grid网格布局"><a href="#使用grid网格布局" class="headerlink" title="使用grid网格布局"></a>使用grid网格布局</h2><p><code>display:grid</code>应该说是一个display的属性值，相关的知识点可以戳<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout" target="_blank" rel="noopener">这里</a>了解更多。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  content</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结合js和min-height"><a href="#结合js和min-height" class="headerlink" title="结合js和min-height"></a>结合js和min-height</h2><p>使用js进行页面的高度的获取，再减去底部的<code>footer</code>的高度，之后设置<code>min-height</code>就行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">content</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">html,body&#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">.footer&#123;</span><br><span class="line">height: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取浏览器的宽高</span></span><br><span class="line">    getClient() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            width: <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">            height: <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>后话</p></blockquote><p>部分内容参考网络，欢迎指正！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/css/fixed-footer-methods/banner.jpg&quot; alt=&quot;frontend/css/fixed-footer-methods/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;在页面的开发过程中，会遇到屏幕的内容比较少，那么如果按照传统的布局的话，页脚就会上移，造成页脚底部有空余的空间，很不是美观。那么，我们应该进行相关的处理，使得内容较少的时候，页脚是固定在页面的底部的。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="http://reng99.cc/tags/CSS/"/>
    
      <category term="javascript" scheme="http://reng99.cc/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>XSS攻击</title>
    <link href="http://reng99.cc/2018/07/24/xss-attack/"/>
    <id>http://reng99.cc/2018/07/24/xss-attack/</id>
    <published>2018-07-24T12:25:02.000Z</published>
    <updated>2018-07-25T15:33:48.545Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/security/xss/banner.jpg" alt="frontend/security/xss/banner"></p><p>XSS攻击全称<code>跨站脚本攻击</code>，是为不和层叠样式表（Cascading Style Sheet, CSS）的缩写混淆，故将跨站脚本攻击缩写为<code>XSS</code>。</p><a id="more"></a><blockquote><p>有待补充</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/security/xss/banner.jpg&quot; alt=&quot;frontend/security/xss/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;XSS攻击全称&lt;code&gt;跨站脚本攻击&lt;/code&gt;，是为不和层叠样式表（Cascading Style Sheet, CSS）的缩写混淆，故将跨站脚本攻击缩写为&lt;code&gt;XSS&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="安全" scheme="http://reng99.cc/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>重游广西阳朔</title>
    <link href="http://reng99.cc/2018/07/08/yangShuo-tourist-second/"/>
    <id>http://reng99.cc/2018/07/08/yangShuo-tourist-second/</id>
    <published>2018-07-08T14:22:02.000Z</published>
    <updated>2018-07-22T15:32:30.470Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/banner_img.jpg" alt="life/tourist/yangShuoSecond/banner_img"></p><p>时隔半年，周末(6.23-6.24)的时候又来到了阳朔，这次过来阳朔是团队FEers一起来的，人多又是不同的一次体验，而且还遇上了下雨天气，又是不一番的景象。多图预警哈，啦啦啦～</p><a id="more"></a><p>这次走的路线跟上次不一样，因为只有两天的时间并且加上是一堆的人过去，所以我们直接前往阳朔小镇了。去的当天早上是晴天，还庆幸没下雨（来时查了下天气预报说有雨），没想到下午就下起了大雨。但是，大雨也阻止不了我们逗比一行的乐趣–在一个下帐篷下都可以有说有笑的。</p><p>比较尴尬的是，我们是下午才开始竹筏游漓江，水真的是浑浊得一逼，还是比较喜欢一堆人电摩骑行的那个下午时段，很是放松😌</p><p>直接上图：</p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/team_img01.jpg" alt="life/tourist/yangShuoSecond/team_img01"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/team_img02.jpg" alt="life/tourist/yangShuoSecond/team_img02"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/girls_img01.png" alt="life/tourist/yangShuoSecond/girls_img01"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/scene_img01.png" alt="life/tourist/yangShuoSecond/scene_img01"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/team_img03.png" alt="life/tourist/yangShuoSecond/team_img03"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/about_me_img01.png" alt="life/tourist/yangShuoSecond/about_me_img01"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/scene_img02.png" alt="life/tourist/yangShuoSecond/scene_img02"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/team_img04.png" alt="life/tourist/yangShuoSecond/team_img04"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/scene_img03.png" alt="life/tourist/yangShuoSecond/scene_img03"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/bamboo_raft.png" alt="life/tourist/yangShuoSecond/bamboo_raft"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/scene_img04.png" alt="life/tourist/yangShuoSecond/scene_img04"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/about_me_img02.JPG" alt="life/tourist/yangShuoSecond/about_me_img02"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/about_me_img03.png" alt="life/tourist/yangShuoSecond/about_me_img03"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/scene_img05.png" alt="life/tourist/yangShuoSecond/scene_img05"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/scene_img06.png" alt="life/tourist/yangShuoSecond/scene_img06"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/scene_img07.png" alt="life/tourist/yangShuoSecond/scene_img07"></p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/about_me_img04.png" alt="life/tourist/yangShuoSecond/about_me_img04"></p><p>很是愉快的一次集体旅游，明年再去，估计我们下面三个人过去了，因为我在<code>芒果帮</code>留下我们三个人的名字了，哈哈哈～</p><p><img src="http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/about_me_img05.png" alt="life/tourist/yangShuoSecond/about_me_img05"></p><p style="font-size:12px;text-align:center;">暴露了字丑的事实～～</p><p>有空明年见–阳朔 @～@</p><blockquote><p>后话</p></blockquote><p>爆团队人的照了，团队的人看到的话觉得图片放得不合适的话，告诉我哈。反正我是不会替换的啦～～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/life/tourist/yangShuoSecond/banner_img.jpg&quot; alt=&quot;life/tourist/yangShuoSecond/banner_img&quot;&gt;&lt;/p&gt;
&lt;p&gt;时隔半年，周末(6.23-6.24)的时候又来到了阳朔，这次过来阳朔是团队FEers一起来的，人多又是不同的一次体验，而且还遇上了下雨天气，又是不一番的景象。多图预警哈，啦啦啦～&lt;/p&gt;
    
    </summary>
    
      <category term="诗和远方" scheme="http://reng99.cc/categories/%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9/"/>
    
    
      <category term="旅游" scheme="http://reng99.cc/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript糟粕部分</title>
    <link href="http://reng99.cc/2018/07/08/javascript-rubbishy-part/"/>
    <id>http://reng99.cc/2018/07/08/javascript-rubbishy-part/</id>
    <published>2018-07-08T02:55:04.000Z</published>
    <updated>2018-07-08T09:03:34.568Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/javascript/rubbishy/banner.jpg" alt="frontend/javascript/rubbishy/banner"></p><p>JavaScript是一门优秀的语言，但是难免存在着某些缺点，本博文主要说明下JavaScript的一些缺点。</p><a id="more"></a><h2 id=""><a href="#" class="headerlink" title="=="></a>==</h2><p>JavaScript有两组相等的运算符：<code>===和!==</code>，以及他们邪恶的孪生兄弟<code>==和!=</code>。<code>===和!==</code>运算符能够按照你期望的方式工作。如果两个<strong>运算数类型一致且拥有相同的值</strong>，那么<code>===</code>就返回true，<code>!==</code>返回false。但是<strong>==和!=</strong>只有在两个运算符类型一致时才会做出正确的判断，如果两个运算数是不同的类型，他们试图去强制转换值的类型。转换的规则复杂难以记忆。下面的一些有趣的例子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 传递性</span><br><span class="line">'0' == 0 # true</span><br><span class="line">0 == '' # true</span><br><span class="line">'' == '0' # false   为什么不是true呢</span><br><span class="line"></span><br><span class="line">false == 'false' # false</span><br><span class="line">false == 0 # true</span><br><span class="line"></span><br><span class="line">false == undefined # false</span><br><span class="line">false == null # false</span><br><span class="line">null == undefined # true</span><br><span class="line"></span><br><span class="line">'\t\r\n' == 0 # true</span><br></pre></td></tr></table></figure><p><code>==</code>运算符对<strong>传递性</strong>的缺乏值值得我们警惕。最好永远不要使用那对邪恶的孪生兄弟。相反的，请始终使用<code>===和!==</code>。如果上面的比较都是用<code>===</code>运算符，结果都是false，在编程中规定使用，很是受益。</p><p>⚠️传递性是一种编程约定。可以理解：对于任意的引用值x、y和z，如果x == y 和 y == z 为 ture，那么 x == z 为true。而JavaScript中的 == 运算符在某种特例上违背了传递性。</p><h2 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h2><p>JavaScript提供了一个with语句，本意是想使用它来快捷访问对象的属性。然而，它的结果可能有时不可预料，所以应该避免使用它。</p><p>下面的语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> (obj)&#123;</span><br><span class="line">a = b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和下面的代码做的是同样的事情：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj.a === <span class="literal">undefined</span>) &#123;</span><br><span class="line">a = obj.b === <span class="literal">undefined</span> ? b : obj.b;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">obj.a = obj.b === <span class="literal">undefined</span> ? b : obj.b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，它等于这些语句中的一条：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = b;</span><br><span class="line">a = obj.b;</span><br><span class="line">obj.a = b;</span><br><span class="line">obj.a = obj.b;</span><br></pre></td></tr></table></figure><p>通过阅读代码，你不可能辨别出你会得到的是这些语句的那一条。它可能随着程序运行到下一步时发生变化。它甚至可能在程序运行过程中就发生了变化。如果你不能通过阅读程序就了解它将做什么，你就无法确信它会正确地做你想要做的事情。</p><p>with语句在JavaScript中存在，本身就<strong>严重影响了JavaScript处理器的速度</strong>，因为它阻断了变量名的语法作用域绑定。它的本意是好的，但是如果没有它，JavaScript语言会更好一点。</p><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><p>eval函数传递了一个字符串给JavaScript编译器，并且执行其结果。它是一个被滥用的JavaScript特性。那些对JavaScript语言一知半解的人们最常用到它。例如你知道点表示法，但是不知道下标表示法，就可能会这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">"myValue = myObject."</span> + myKey + <span class="string">";"</span>);</span><br></pre></td></tr></table></figure><p>而不是这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvalue = myObject[myKey];</span><br></pre></td></tr></table></figure><p>使用eval形式的代码更加难以阅读。这种形式使得性能显著降低，因为它<strong>需要运行编译器</strong>，但也许只是为了执行一个微不足道的赋值语句。它也会让JSLint【⚠️JSLint是一个JavaScript语法检查器和校验器。】失效，让此工具检测问题的能力大打折扣。</p><p>eval函数还减弱了你的应用程序的安全性，带来XSS攻击，因为它被求值的文本授予了太多的权力。而且就像with语句执行的方式一样，它降低了语言的性能。</p><p>Function 构造器是eval的另一种形式，同样也应该避免使用它。</p><p>浏览器提供的setTimeout和setInterval函数，他们能够接受字符串参数或函数参数。当传递的是字符串参数时，setTimeout和setInterval会像eval那样去处理。同样也应该避免使用字符串参数形式。</p><h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h2><p>continue语句跳转到循环的顶部。可对代码重构后，性能会得到一定的改善，看下面的代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beginTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line"><span class="keyword">var</span> loop = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; loop ; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> endTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">console.log('耗费时间:'+ (endTime-beginTime)); # 58625</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beginTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line"><span class="keyword">var</span> loop = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; loop ; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> endTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">console.log('耗费时间:'+ (endTime-beginTime)); # 58471</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beginTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line"><span class="keyword">var</span> loop = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; loop ; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>) <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> endTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">console.log('耗费时间:'+ (endTime-beginTime)); # 56063</span><br></pre></td></tr></table></figure><h2 id="switch穿越"><a href="#switch穿越" class="headerlink" title="switch穿越"></a>switch穿越</h2><p>除非是明确中断流程，否则每次条件判断后都穿越到下一个case条件。在使用的时候要小心这种带刺的玫瑰，他们是有用的，也是危险的。</p><h2 id="缺少块的语句"><a href="#缺少块的语句" class="headerlink" title="缺少块的语句"></a>缺少块的语句</h2><p>If、while、do 或 for 语句可以接受一个括在花括号中的代码块，页可以接受单行语句。单行语句的形式是另一种带刺的玫瑰。它带来的好处是可以节省两个字节，但这是不是一个好处值得商榷。它模糊了程序的结构，使得在随后的操作代码中可能容易插入错误。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ok)</span><br><span class="line">t = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>可能变成:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ok)</span><br><span class="line">t = <span class="literal">true</span>;</span><br><span class="line">advance();</span><br></pre></td></tr></table></figure><p>它看起来就像要这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ok) &#123;</span><br><span class="line">t = <span class="literal">true</span>;</span><br><span class="line">advance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是实际上它的本意是这样的:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ok) &#123;</span><br><span class="line">t = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">advance();</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ok) &#123;</span><br><span class="line">t = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">advance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>貌似是在做一件事情，但实际上是在做另一件事的程序是很难理解清楚的。团队中制定严格的规范要求始终使用代码块是得代码更加容易理解。</p><h2 id="–"><a href="#–" class="headerlink" title="++ –"></a>++ –</h2><p>递增和递减运算符使得程序员可以用非常简洁的风格去编码。比如在C语言中，它们使得用一行代码实现字符串的复制成为可能：</p><p><code>for(p = src, q = dest; *p; p++, q++) *q = *p;</code></p><p>事实上，这两个运算符鼓励了一种不够严谨的编码风格。大多数的缓冲区溢出错误所造成的安全漏洞，都是由像这样编码而导致的。</p><p>当使用<code>++ 和 --</code>时，代码往往过于拥挤、复杂和隐晦。因此，作为一条原则，我不再使用它们。团队上也可以规范一波，那样我们的代码风格会变得更加整洁。</p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>JavaScript有着和Java相同的一套位运算符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&amp;and 按位与</span><br><span class="line">|or 按位或</span><br><span class="line">^xor 按位异或</span><br><span class="line">~not 按位非</span><br><span class="line">&gt;&gt;带符号的右移动</span><br><span class="line">&gt;&gt;&gt;无符号的（用0补足的）右移动</span><br><span class="line">&lt;&lt; 左位移</span><br></pre></td></tr></table></figure><p>在Java中，位运算符处理的是整数。JavaScript没有整数类型，它只有双精度的浮点数。因此，位操作符吧它们的数字运算数先转换成整数，接着执行运算，然后再转换回去。在大多数语言中，这些运算符接近于硬件处理，所以非常快。但JavaScript的执行环境一般接触不到硬件，所以非常慢。JavaScript很少被用来执行位操作。</p><h2 id="function语句对比function表达式"><a href="#function语句对比function表达式" class="headerlink" title="function语句对比function表达式"></a>function语句对比function表达式</h2><p>JavaScript既有function语句，同时也有function表达式。这令人困惑，因为它们看起来好像是相同的。一个function语句就是其值为一个函数的var语句的速记形式。</p><p>下面的语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>意思相当于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>第二种写法相对友好，因为它明确表示foo是一个包含一个函数值的<strong>变量</strong>。要学好JavaScript这门语言，理解<strong>函数就是数值</strong>是很重要的。</p><p>function语句在解析时会发生被提升的情况，这意味着不管function被放置在哪里，它会被移动到被定义时所在作用域<code>顶层</code>。这就放宽了函数必须先声明后使用的要求，这会导致混乱的。在if语句中使用<code>function语句</code>也是被禁止的。结果表明大多数的浏览器都允许在if语句里使用function语句，但是它们在解析的时候处理上各不相同。这就造成了可移植性的问题。</p><p>一个语句不能以一个函数表达式开头，因为官方的语法假定以单词<code>function</code>开头的语句是一个<code>function</code>语句。解决的方法就是把函数调用括在一个圆括号中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> hidden_variable;</span><br><span class="line"></span><br><span class="line"># 这个函数可能对环境有一些影响，但是不会映入新的全局变量</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="类型的包装对象"><a href="#类型的包装对象" class="headerlink" title="类型的包装对象"></a>类型的包装对象</h2><p>JavaScript有一套类型的包装对象。例如：</p><p><code>new Boolean(false)</code></p><p>会返回一个对象，该对象有一个valueOf方法会返回被包装的值。这其实完全没有必要，并且有时还令人困惑。不要使用<code>new Boolean、new Number 或 new String</code>。</p><p>此外，页应该避免使用<code>new Object 和 new Array</code>。可使用<code>{} 和 []</code>来替代。</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><p>JavaScript的new运算符创建了一个继承于其运算符的原型的新对象，然后调用该运算数，把新创建的对象绑定给this。这给运算数（它应该是一个构造函数）一个机会在返回给请求者自定义新创建对象。</p><p>如果忘记了使用此<code>new运算符</code>，你得到的就是一个普通的函数调用，并且this被绑定到全局对象，而不是新创建的对象。者意味着当你的函数尝试去初始化新成员属性时它将会污染全局变量。这是一件非常糟糕的事情。而且既没有编译时警告，也没有运行时警告。</p><p>按照惯例，<strong>打算与new结合使用的函数应该以首字母大写的形式命名</strong>，并且首字母大写的形式应该只用来命名那些构造器函数。这个约定帮助我们进行区分，便于我们发现那些Javascript语言自身经常忽略但是却带来昂贵代价的错误。</p><p>一个更好的应对方法策略是根本不去使用new。幻想下就行啦～</p><h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><p>在很多语言中，void 是一种类型，表示没有值（空值）。<code>而在JavaScript中，void是一个运算符</code>，它接受一个运算数并且返回undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   a = <span class="keyword">void</span> ( a = <span class="number">90</span> );</span><br><span class="line">   document.write('a = ' + a); # a = undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这并没有什么用，而且令人非常困惑。应该避免使用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《JavaScript语言精粹》Douglas Crockford著 赵泽欣 鄢学鹍 译</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/javascript/rubbishy/banner.jpg&quot; alt=&quot;frontend/javascript/rubbishy/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;JavaScript是一门优秀的语言，但是难免存在着某些缺点，本博文主要说明下JavaScript的一些缺点。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="http://reng99.cc/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS清除浮动</title>
    <link href="http://reng99.cc/2018/07/03/clear-float/"/>
    <id>http://reng99.cc/2018/07/03/clear-float/</id>
    <published>2018-07-03T04:59:16.000Z</published>
    <updated>2018-08-02T12:40:41.238Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/banner.jpg" alt="frontend/css/clear-float/banner"></p><p>浮动对页面的影响：如果一个父盒子中有一个子盒子，并且子盒子没有设置高，子盒子在父盒子中进行浮动，那么将来父盒子的高度为0，由于父盒子的高度为0，下面的元素会自动补位，所以这个时候有必要进行浮动的清除。</p><a id="more"></a><p>下面代码来掩饰如何清除浮动：</p><p>原代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>清除浮动的方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">height: 100px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.blue</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">background: blue;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.other</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="undefined">height: 30px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span><span class="selector-pseudo">:yellow</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"other"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原效果：</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/origin_clear_float.png" alt="frontend/css/clear-float/origin_clear_float"></p><p>为红色和绿色方块添加左浮动后</p><p>原代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>清除浮动的方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">height: 100px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.blue</span>&#123;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">background: blue;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.other</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="undefined">height: 30px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span><span class="selector-pseudo">:yellow</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"other"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其效果为–</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/float_left.png" alt="frontend/css/clear-float/float_left"></p><h2 id="方法一：使用overflow属性来清除浮动"><a href="#方法一：使用overflow属性来清除浮动" class="headerlink" title="方法一：使用overflow属性来清除浮动"></a>方法一：使用overflow属性来清除浮动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.outer&#123;</span><br><span class="line">    overflow:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先找到浮动盒子的父元素（盒子），在父元素中田间一个属性<code>overflow:hidden</code>，就是清除这个父元素中的子元素浮动对页面的影响。</p><p>效果如下：</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/after_clear_float_method1.png" alt="frontend/css/clear-float/after_clear_float_method1"></p><p><strong>注意：</strong>一般情况下不会使用这种方式，因为<code>overfloat:hidden</code>有一个特点，离开了这个元素所在的区域之后会被隐藏（overflow:hidden会将超出的部分隐藏起来）。</p><h2 id="方法二：使用额外的标签"><a href="#方法二：使用额外的标签" class="headerlink" title="方法二：使用额外的标签"></a>方法二：使用额外的标签</h2><p>这又分两种情况–</p><h3 id="内部标签"><a href="#内部标签" class="headerlink" title="内部标签"></a>内部标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear:both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"other"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>放在浮动元素的父元素里面，效果如下图：</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/after_clear_float_method1.png" alt="frontend/css/clear-float/after_clear_float_method1"></p><h3 id="外部标签"><a href="#外部标签" class="headerlink" title="外部标签"></a>外部标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear:both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"other"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>放在浮动元素父元素同级位置，最终效果如下：</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/after_clear_float_method2.png" alt="frontend/css/clear-float/after_clear_float_method2"></p><p>这两种种清除的方式有下面的特点：</p><p>1.内部标签：会将这个浮动盒子的父盒子的高度重新撑开</p><p>2.外部标签：会将这个浮动盒子的影响清除，但是不会撑开父盒子。</p><p><strong>注意：</strong>⚠️一般情况下不会使用这种方式来清除浮动。因为这种清除浮动方式会增加页面的标签，造成机构混乱。</p><h2 id="方法三：使用伪元素-after"><a href="#方法三：使用伪元素-after" class="headerlink" title="方法三：使用伪元素:after"></a>方法三：使用伪元素:after</h2><p>outer利用其伪类<code>clear:after</code>在元素内部增加一个类似div.clear的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.outer &#123; /*==for IE6/7 Maxthon2  为了兼容IE==*/</span><br><span class="line">        zoom:1;</span><br><span class="line">    &#125;  </span><br><span class="line">.outer:after&#123;</span><br><span class="line">content:"."; /*可以取值，也可以为空*/</span><br><span class="line">clear:both;</span><br><span class="line">display: block;</span><br><span class="line">width:0;</span><br><span class="line">height: 0;</span><br><span class="line">visibility: hidden;／*visibility:hidden;的作用是允许浏览器渲染它，但是不显示出来*／</span><br><span class="line"></span><br><span class="line">　　　　　&#125;</span><br></pre></td></tr></table></figure><p>这是网上使用比较广泛，拉风的清除方式。</p><p>其效果如下：</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/after_clear_float_method1.png" alt="frontend/css/clear-float/after_clear_float_method1"></p><h2 id="方法四：使用双伪元素清除浮动"><a href="#方法四：使用双伪元素清除浮动" class="headerlink" title="方法四：使用双伪元素清除浮动"></a>方法四：使用双伪元素清除浮动</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.outer &#123; /*==for IE6/7 Maxthon2  为了兼容IE==*/</span><br><span class="line">        zoom:1;</span><br><span class="line">    &#125;  </span><br><span class="line">.outer:after,.outer:before&#123;</span><br><span class="line">content:"."; /*取值只能为空*/</span><br><span class="line">clear:both;</span><br><span class="line">display: block;</span><br><span class="line">　　　　　&#125;</span><br></pre></td></tr></table></figure><p>其效果如下：</p><p><img src="http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/after_clear_float_method1.png" alt="frontend/css/clear-float/after_clear_float_method1"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>第一种方法会将超出部分隐藏，在某些时候我们想清除浮动并且保留超出部分的时候做不到。</p><p>第二种方法会增加不必要的标签。</p><p>所以我们选择第三种方法来清除浮动。</p><p>为什么不选择第四种来清除呢？因为第四种是第三种的改良版，虽然比较简便，但是不够严谨，比如<code>content</code>的内容不为空的时候，会出现问题，感兴趣的话可以自行尝试下咯。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/frontend/css/clear-float/banner.jpg&quot; alt=&quot;frontend/css/clear-float/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;浮动对页面的影响：如果一个父盒子中有一个子盒子，并且子盒子没有设置高，子盒子在父盒子中进行浮动，那么将来父盒子的高度为0，由于父盒子的高度为0，下面的元素会自动补位，所以这个时候有必要进行浮动的清除。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://reng99.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="http://reng99.cc/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>散列</title>
    <link href="http://reng99.cc/2018/06/18/algorithm-hash/"/>
    <id>http://reng99.cc/2018/06/18/algorithm-hash/</id>
    <published>2018-06-18T10:00:48.000Z</published>
    <updated>2018-08-13T15:40:41.716Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/algorithm/hash/banner.jpg" alt="algorithm/hash/banner"></p><p>散列是一种常用的数据存储技术，散列后的数据可以进行快速地插入或取用。散列使用的数据结构叫做散列表（hash table, 也叫哈希表）。在散列表中<strong>插入、删除和取用数据</strong>都非常快，但是对于查找操作来说却效率低下，比如查找一组数据中的最大或者最小值。</p><a id="more"></a><blockquote><p>散列算法的作用是尽可能快地在数据结构中找到一个值。在前面几个博文中提到的数据结构，我门如果在数据结构中获取一个值（使用get方法），需要遍历整个数据库来找到它。如果使用散列函数，就知道值的具体位置，因此你能够快速检索到该值。散列函数的作用是给定一个键值，然后返回值在表中的地址。</p></blockquote><p>见下图的例子（散列函数这里取ascii值相加-电子邮件地址薄）：</p><p><img src="http://omu538iq8.bkt.clouddn.com/algorithm/hash/email-demo.png" alt="algorithm/hash/email-demo"></p><h2 id="创建一个散列表"><a href="#创建一个散列表" class="headerlink" title="创建一个散列表"></a>创建一个散列表</h2><p>搭建散列表类如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> table = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的散列函数如下（取上图的ascii值）:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> loseloseHashCode = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++)&#123;</span><br><span class="line">hash += key.charCodeAt(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本完整代码"><a href="#基本完整代码" class="headerlink" title="基本完整代码"></a>基本完整代码</h2><p>hash表的简单demo的基本完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> loseloseHashCode = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++)&#123;</span><br><span class="line">hash += key.charCodeAt(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> table = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向散列表中增加一个新的项（也能更新散列表）</span></span><br><span class="line"><span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span>(<span class="params">key , value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line"><span class="built_in">console</span>.log(position + <span class="string">' - '</span> + key);</span><br><span class="line">table[position] = value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回检索到的特定的值</span></span><br><span class="line"><span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> table[loseloseHashCode(key)];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据键值从散列表中移除值</span></span><br><span class="line"><span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">table[loseloseHashCode(key)] = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的简单的完整代码中，展示了hash的思想，但是，发生冲突，又该怎么解决呢？</p><h2 id="处理冲突"><a href="#处理冲突" class="headerlink" title="处理冲突"></a>处理冲突</h2><p>介绍处理数据位置相同，覆盖之前数据方法。这里用到之前学习的数据结构，感兴趣的人儿请自动前翻。</p><h3 id="分离链接"><a href="#分离链接" class="headerlink" title="分离链接"></a>分离链接</h3><p>分离链接法包括为散列表的每一个位置创建一个链表并将元素存储在里面。他是解决冲突的最简单的方法，但是它在HashTable实例之外还需要额外的存储空间。</p><p>使用到之前说到的链表。分离链接的具体代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们需要一个辅助类来表示将要加入LinkedList实例的元素，这里我们称ValuePair</span></span><br><span class="line"><span class="keyword">var</span> ValuePair = <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.key = key;</span><br><span class="line"><span class="keyword">this</span>.value =  value;</span><br><span class="line"><span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`[<span class="subst">$&#123;<span class="keyword">this</span>.key&#125;</span> - <span class="subst">$&#123;<span class="keyword">this</span>.value&#125;</span>]`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//put 方法</span></span><br><span class="line"><span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line"><span class="keyword">if</span>(table[position] == <span class="literal">undefined</span>)&#123;</span><br><span class="line">table[position] = <span class="keyword">new</span> LinkedList();</span><br><span class="line">&#125;</span><br><span class="line">table[position].append(<span class="keyword">new</span> ValuePair(key,value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get 方法</span></span><br><span class="line"><span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line"><span class="keyword">if</span>(table[position] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line"><span class="comment">// 遍历链表来寻找键/值</span></span><br><span class="line"><span class="keyword">var</span> current = table[position].getHead();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(current.next)&#123;</span><br><span class="line"><span class="keyword">if</span>(current.element.key === key)&#123;</span><br><span class="line"><span class="keyword">return</span> current.element.value;</span><br><span class="line">&#125;</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查元素在链表第一个或最后一个节点的情况</span></span><br><span class="line"><span class="keyword">if</span>(current.element.key === key)&#123;</span><br><span class="line"><span class="keyword">return</span> current.element.value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove 方法</span></span><br><span class="line"><span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line"><span class="keyword">if</span>(table[position] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> current = table[position].getHead();</span><br><span class="line"><span class="keyword">while</span>(current.next)&#123;</span><br><span class="line"><span class="keyword">if</span>(current.element.key === key)&#123;</span><br><span class="line">table[position].remove(current.element);</span><br><span class="line"><span class="keyword">if</span>(table[position].isEmpty())&#123;</span><br><span class="line">table[position] = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否为第一个或最后一个元素</span></span><br><span class="line"><span class="keyword">if</span>(current.element.key === key)&#123;</span><br><span class="line">table[position].remove(current.element);</span><br><span class="line"><span class="keyword">if</span>(table[position].isEmpty())&#123;</span><br><span class="line">table[position] = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性探查"><a href="#线性探查" class="headerlink" title="线性探查"></a>线性探查</h3><p>当想向表中某个位置加入一个新元素的时候，如果索引为index的位置被占据了，就尝试index+1的位置。如果index+1的位置也被占用了，就尝试index+2的位置，以此类推。</p><p>相关的方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// put 方法</span></span><br><span class="line"><span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line"><span class="keyword">if</span>(table[position] == <span class="literal">undefined</span>)&#123;</span><br><span class="line">table[position] = <span class="keyword">new</span> ValuePair(key,value);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">var</span> index = ++position;</span><br><span class="line"><span class="keyword">while</span>(table[index]!=<span class="literal">undefined</span>)&#123;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">table[index] = <span class="keyword">new</span> ValuePair(key,value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get 方法</span></span><br><span class="line"><span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line"><span class="keyword">if</span>(table[position] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(table[position].key === key)&#123;</span><br><span class="line"><span class="keyword">return</span> table[position].value;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> index = ++position;</span><br><span class="line"><span class="keyword">while</span>(table[index] === <span class="literal">undefined</span> || table[index].key !== key)&#123;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(table[index].key === key)&#123;</span><br><span class="line"><span class="keyword">return</span> table[index].value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove 方法</span></span><br><span class="line"><span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line"><span class="keyword">if</span>(table[position] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(table[position].key === key)&#123;</span><br><span class="line">table[index] = <span class="literal">undefined</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> index = ++position;</span><br><span class="line"><span class="keyword">while</span>(table[index] === <span class="literal">undefined</span> || table[index].key !== key)&#123;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(table[index].key === key)&#123;</span><br><span class="line">table[index] = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：详细内容请前往《javascript数据结构与算法》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/algorithm/hash/banner.jpg&quot; alt=&quot;algorithm/hash/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;散列是一种常用的数据存储技术，散列后的数据可以进行快速地插入或取用。散列使用的数据结构叫做散列表（hash table, 也叫哈希表）。在散列表中&lt;strong&gt;插入、删除和取用数据&lt;/strong&gt;都非常快，但是对于查找操作来说却效率低下，比如查找一组数据中的最大或者最小值。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://reng99.cc/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="散列" scheme="http://reng99.cc/tags/%E6%95%A3%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>字典</title>
    <link href="http://reng99.cc/2018/06/18/algorithm-dictionary/"/>
    <id>http://reng99.cc/2018/06/18/algorithm-dictionary/</id>
    <published>2018-06-18T05:08:26.000Z</published>
    <updated>2018-06-18T09:44:26.841Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/algorithm/dictionary/banner.jpg" alt="algorithm/dictionary/banner"></p><p>在字典中，存储的是[键,值]对，其中键名是用来查询特定元素的。字典和之前介绍的<a href="http://reng99.cc/2018/06/18/algorithm-set/">集合</a>很相似，集合以[值,值]的形式存储元素，字典则是以[键,值]的形式来存储元素。字典也称做映射。</p><a id="more"></a><h2 id="字典类"><a href="#字典类" class="headerlink" title="字典类"></a>字典类</h2><p>字典类和之前介绍的集合类一样，基本的骨架如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dictionary</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> items = &#123;&#125;; <span class="comment">// 存放数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>因为其和集合很是相似，部分的代码可以使用集合的代码，比如清空字典，字典的大小等等。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dictionary</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> items = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否存在键-值</span></span><br><span class="line"><span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value <span class="keyword">in</span> items;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 也可以是使用hasOwmProperty来实现</span></span><br><span class="line"><span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.hasOwnProperty(value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置新元素</span></span><br><span class="line"><span class="keyword">this</span>.set = <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line">items[key] = value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示字典的数据</span></span><br><span class="line"><span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 临时存放数据</span></span><br><span class="line"><span class="keyword">var</span> values = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> items)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.has(k))&#123;</span><br><span class="line">values.push(items[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> values;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除元素</span></span><br><span class="line"><span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.has(key))&#123;</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">delete</span> items[key];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取特定的项</span></span><br><span class="line"><span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.has(key) ? items[key] : <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空集合中所有值</span></span><br><span class="line"><span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">items = &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取集合的数量</span></span><br><span class="line"><span class="comment">// 下面的实现是在现代浏览器才能使用，当然借助babel可以转换成所有浏览器识别的代码</span></span><br><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.keys(items).length;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 所有浏览器都可以运行</span></span><br><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> items)&#123;</span><br><span class="line"><span class="keyword">if</span>(items.hasOwnProperty(prop))&#123;</span><br><span class="line">++count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多的代码请查看<a href="https://github.com/reng99/algorithm" target="_blank" rel="noopener">https://github.com/reng99/algorithm</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/algorithm/dictionary/banner.jpg&quot; alt=&quot;algorithm/dictionary/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;在字典中，存储的是[键,值]对，其中键名是用来查询特定元素的。字典和之前介绍的&lt;a href=&quot;http://reng99.cc/2018/06/18/algorithm-set/&quot;&gt;集合&lt;/a&gt;很相似，集合以[值,值]的形式存储元素，字典则是以[键,值]的形式来存储元素。字典也称做映射。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://reng99.cc/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="字典" scheme="http://reng99.cc/tags/%E5%AD%97%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="http://reng99.cc/2018/06/18/algorithm-set/"/>
    <id>http://reng99.cc/2018/06/18/algorithm-set/</id>
    <published>2018-06-18T01:58:38.000Z</published>
    <updated>2018-06-18T04:17:14.496Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/algorithm/set/set-banner.jpg" alt="algorithm/set/set-banner"></p><p>集合(Set)是一种包含不同元素的数据结构。集合中的元素称为成员，集合的两个最重要的特性是：首先，集合中的成员是无序的；其次，集合中不允许相同成员的存在。</p><a id="more"></a><h2 id="集合的定义"><a href="#集合的定义" class="headerlink" title="集合的定义"></a>集合的定义</h2><ul><li>不包含任何成员的集合称为空集{}，全集则是包含一切可能成员的集合。</li><li>如何两个集合的成员完全相同，则称两个集合相等。</li><li>如果一个集合中所有的成员都属于另外一个集合，则前一集合称为后一个集合的子集。</li></ul><h2 id="集合的操作"><a href="#集合的操作" class="headerlink" title="集合的操作"></a>集合的操作</h2><p>对集合的操作基本是下面三种：</p><ol><li>并集: 将两个集合中的成员进行合并，得到一个新的集合。</li><li>交集: 两集合中共同存在的成员组成一个新的集合。</li><li>差集: 属于一个集合而不属于另一个集合的成员组成的集合。</li><li>子集: 验证一个给定集合是否是另一个集合的子集。</li></ol><h2 id="创建集合类"><a href="#创建集合类" class="headerlink" title="创建集合类"></a>创建集合类</h2><p>这里还是使用构造函数进行创建集合类:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// some code here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们将使用对象来表示集合<code>var items = {}</code>，集合的键-值是相同的。当然，你也可以使用数组来表示，但是不够直观。而使用对象一个好处是，javascript的对象不允许一个键指向两个不同的属性，保证了集合里的元素都是唯一性的。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>基本的完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 选择对象而不是数组来表示集合</span></span><br><span class="line"><span class="keyword">var</span> items = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否存在键-值</span></span><br><span class="line"><span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value <span class="keyword">in</span> items;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 也可以是使用hasOwmProperty来实现</span></span><br><span class="line"><span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.hasOwnProperty(value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line"><span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.has(value))&#123;</span><br><span class="line">items[value] = value;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取items对象，返回所有属性，以数组形式返回</span></span><br><span class="line"><span class="comment">// 下面的实现是在现代浏览器才能使用，当然借助babel可以转换成所有浏览器识别的代码</span></span><br><span class="line"><span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.keys(items);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 下面的实现在任何浏览器上可以运行</span></span><br><span class="line"><span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> keys = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> items)&#123;</span><br><span class="line">keys.push(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> keys;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除一个元素</span></span><br><span class="line"><span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.has(value))&#123;</span><br><span class="line"><span class="keyword">delete</span> items[value];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空集合中所有值</span></span><br><span class="line"><span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">items = &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取集合的数量</span></span><br><span class="line"><span class="comment">// 下面的实现是在现代浏览器才能使用，当然借助babel可以转换成所有浏览器识别的代码</span></span><br><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.keys(items).length;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 所有浏览器都可以运行</span></span><br><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> items)&#123;</span><br><span class="line"><span class="keyword">if</span>(items.hasOwnProperty(prop))&#123;</span><br><span class="line">++count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">this</span>.union = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 定义一个并集</span></span><br><span class="line"><span class="keyword">var</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本集合对象</span></span><br><span class="line"><span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line">unionSet.add(values[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已知的另外一个集合对象</span></span><br><span class="line">values = otherSet.values();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; values.length; i++)&#123;</span><br><span class="line">unionSet.add(values[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> unionSet;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">this</span>.intersection = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 定义一个交集</span></span><br><span class="line"><span class="keyword">var</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(otherSet.has(values[i]))&#123;</span><br><span class="line">intersectionSet.add(values[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> intersectionSet;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">this</span>.difference = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 定义一个差集</span></span><br><span class="line"><span class="keyword">var</span> differenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!otherSet.has(values[i]))&#123;</span><br><span class="line">differenceSet.add(values[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> differenceSet;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子集</span></span><br><span class="line"><span class="keyword">this</span>.subset = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 如果个数越界肯定不是子集了</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.size() &gt; otherSet.size())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length ; i++)&#123;</span><br><span class="line"><span class="comment">// 只要有一个元素不再另外的集合里面，则不是子集</span></span><br><span class="line"><span class="keyword">if</span>(!otherSet.has(values[i]))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多的代码请查看<a href="https://github.com/reng99/algorithm" target="_blank" rel="noopener">https://github.com/reng99/algorithm</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/algorithm/set/set-banner.jpg&quot; alt=&quot;algorithm/set/set-banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;集合(Set)是一种包含不同元素的数据结构。集合中的元素称为成员，集合的两个最重要的特性是：首先，集合中的成员是无序的；其次，集合中不允许相同成员的存在。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://reng99.cc/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="集合" scheme="http://reng99.cc/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="http://reng99.cc/2018/06/17/algorithm-linked-list/"/>
    <id>http://reng99.cc/2018/06/17/algorithm-linked-list/</id>
    <published>2018-06-17T09:15:48.000Z</published>
    <updated>2018-06-17T15:43:39.028Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/algorithm/linked-list/banner.jpg" alt="algorithm/linked-list/banner"></p><p>链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称为指针或链接，通常叫指针）组成。自己无聊的时候还翻译一点维基百科上的<a href="http://reng99.cc/2018/05/29/linked-list/">链表的介绍</a>。</p><a id="more"></a><h2 id="数组的缺点"><a href="#数组的缺点" class="headerlink" title="数组的缺点"></a>数组的缺点</h2><p>在<code>栈和队列</code>数据结构中，存储数据我们是使用了数组的形式。但是，数组不总是组织数据的最佳的结构。原因如下：</p><ol><li>数组被实现成对象，与其他语言（比如C++和Java）的数组相比，效率很低。【主要原因】</li><li>数组的长度是固定的，所以当数组已被数据填满的时，再要加入新的元素会非常困难。</li><li>从数组的起点或中间插入或移除项的成本很高。虽然<code>splice</code>等方法能帮方便的实现，但是背后的原理还是需要移动元素。</li></ol><p>所以，当数组的代价高的时候，需要考虑其他的数据结构，比如现在要说的链表。</p><h2 id="创建链表类"><a href="#创建链表类" class="headerlink" title="创建链表类"></a>创建链表类</h2><p>通过一个构造函数创建链表类:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// somecode here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>节点数据也是使用一个类进行存放，这里我们叫做Node类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.element = element;</span><br><span class="line"><span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>链表的基本的完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 辅助类</span></span><br><span class="line"><span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.element = element; <span class="comment">// 存放数据</span></span><br><span class="line"><span class="keyword">this</span>.next = <span class="literal">null</span>; <span class="comment">// 存放指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表的长度</span></span><br><span class="line"><span class="keyword">var</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化头指针为空</span></span><br><span class="line"><span class="keyword">var</span> head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向链表尾部追加元素</span></span><br><span class="line"><span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 创建一个node节点</span></span><br><span class="line"><span class="keyword">var</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">current; <span class="comment">// 当前的指向节点/元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">null</span>)&#123; <span class="comment">// 列表中的第一个节点</span></span><br><span class="line">head = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">current = head;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环列表，直到找到最后一项</span></span><br><span class="line"><span class="keyword">while</span>(current.next)&#123;</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到追后一项，将next赋值为node，建立链接</span></span><br><span class="line">current.next = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新链表的长度</span></span><br><span class="line">length++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从链表中移除元素,通过指定位置移除</span></span><br><span class="line"><span class="keyword">this</span>.removeAt = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 检查指定移除的position是否越界</span></span><br><span class="line"><span class="keyword">if</span>(position &gt; <span class="number">-1</span> &amp;&amp; position &lt; length)&#123; <span class="comment">// 未越界</span></span><br><span class="line"><span class="keyword">var</span> current = head, <span class="comment">// 当前元素指向头节点</span></span><br><span class="line"> previous, <span class="comment">// 上一个节点</span></span><br><span class="line"> index = <span class="number">0</span>; <span class="comment">// 节点的索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除第一项</span></span><br><span class="line"><span class="keyword">if</span>(position == <span class="number">0</span>)&#123;</span><br><span class="line">head = current.next;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span> (index++ <span class="xml"><span class="tag">&lt; <span class="attr">position</span>)&#123;</span></span></span><br><span class="line"><span class="xml">previous = current;</span></span><br><span class="line"><span class="xml">current = current.next;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 将previous与current的下一项链接起来：跳过current，从而移除它</span></span><br><span class="line"><span class="xml">previous.next = current.next;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 链表长度减一</span></span><br><span class="line"><span class="xml">length--;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 返回删除的元素</span></span><br><span class="line"><span class="xml">return current.element;</span></span><br><span class="line"><span class="xml">&#125;else&#123;</span></span><br><span class="line"><span class="xml">// position越界的情况</span></span><br><span class="line"><span class="xml">return null;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 任意位置插入一个元素</span></span><br><span class="line"><span class="xml">this.insert = function(position , element)&#123;</span></span><br><span class="line"><span class="xml">// 检查position是否越界</span></span><br><span class="line"><span class="xml">if(position &gt;= 0 &amp;&amp; position <span class="tag">&lt;<span class="name">=length)&#123;</span></span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">var node = new Node(element), // 新建一个节点</span></span><br><span class="line"><span class="xml">current = head, // 初始当前节点指向头节点</span></span><br><span class="line"><span class="xml">previous, // 前一个节点</span></span><br><span class="line"><span class="xml">index = 0; // 默认索引从第一个开始</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">if(position == 0)&#123; // 在第一个位置添加元素</span></span><br><span class="line"><span class="xml">node.next = current;</span></span><br><span class="line"><span class="xml">head = node;</span></span><br><span class="line"><span class="xml">&#125; else &#123;</span></span><br><span class="line"><span class="xml">while(index++ <span class="tag">&lt; <span class="attr">position</span>)&#123;</span></span></span><br><span class="line"><span class="xml">previous = current;</span></span><br><span class="line"><span class="xml">current = current.next;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">node.next = current;</span></span><br><span class="line"><span class="xml">previous.next = node;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 更新列表长度</span></span><br><span class="line"><span class="xml">length++;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">return true;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&#125; else&#123;</span></span><br><span class="line"><span class="xml">// position越界</span></span><br><span class="line"><span class="xml">return false;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 将LinkedList对象转换成一个字符串</span></span><br><span class="line"><span class="xml">this.toString = function() &#123;</span></span><br><span class="line"><span class="xml">var current = head,</span></span><br><span class="line"><span class="xml"> string = '';</span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml">while(current)&#123;</span></span><br><span class="line"><span class="xml">string += current.element;</span></span><br><span class="line"><span class="xml">current = current.next;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">return string;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 查找元素在链表中的位置</span></span><br><span class="line"><span class="xml">this.indexOf = function(element) &#123;</span></span><br><span class="line"><span class="xml">var current = head;</span></span><br><span class="line"><span class="xml">index = 0;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">while(current)&#123;</span></span><br><span class="line"><span class="xml">if(element == current.element) &#123;</span></span><br><span class="line"><span class="xml">return index;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">index++;</span></span><br><span class="line"><span class="xml">current = current.next;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 找不到元素</span></span><br><span class="line"><span class="xml">return -1;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 链表中移除元素，通过指定移除的元素</span></span><br><span class="line"><span class="xml">this.remove = function(element) &#123;</span></span><br><span class="line"><span class="xml">var index = this.indexOf(element);</span></span><br><span class="line"><span class="xml">return this.removeAt(index);</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 检查链表是否为空</span></span><br><span class="line"><span class="xml">this.isEmpty = function() &#123;</span></span><br><span class="line"><span class="xml">return length == 0;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 获取链表的长度</span></span><br><span class="line"><span class="xml">this.size = function() &#123;</span></span><br><span class="line"><span class="xml">return length;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 获取链表的头节点</span></span><br><span class="line"><span class="xml">this.getHead = function() &#123;</span></span><br><span class="line"><span class="xml">return head;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>更多的代码请查看<a href="https://github.com/reng99/algorithm" target="_blank" rel="noopener">https://github.com/reng99/algorithm</a>。</p><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>上面所说的链表是单链表。尽管从链表的头节点遍历到尾节点很简单，但反过来，从后向前遍历九没有那么简单了。这时候我们可以通过给Node对象增加一个头指针的属性就容易多了。</p><p>Node类就变成下面这样了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.element = element;</span><br><span class="line"><span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个双向链表的类如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.element = element;</span><br><span class="line"><span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">this</span>.prev = <span class="literal">null</span>; <span class="comment">// 新增的前指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> head = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> tail = <span class="literal">null</span>; <span class="comment">// 新增的尾节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// methods here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其相关的方法和单链表的方法是大同小异，还有一个循环链表也是差不多啦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/algorithm/linked-list/banner.jpg&quot; alt=&quot;algorithm/linked-list/banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称为指针或链接，通常叫指针）组成。自己无聊的时候还翻译一点维基百科上的&lt;a href=&quot;http://reng99.cc/2018/05/29/linked-list/&quot;&gt;链表的介绍&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://reng99.cc/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="链表" scheme="http://reng99.cc/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="http://reng99.cc/2018/06/17/algorithm-queue/"/>
    <id>http://reng99.cc/2018/06/17/algorithm-queue/</id>
    <published>2018-06-17T05:11:08.000Z</published>
    <updated>2018-06-17T09:13:49.692Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/algorithm/queue/queue_banner.jpg" alt="algorithm/queue/queue_banner"></p><p>队列是遵循FIFO（First In First Out，先进先出，也称为先来先服务）原则的一组有序的项。队列在队尾添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。</p><a id="more"></a><h2 id="定义一个队列类"><a href="#定义一个队列类" class="headerlink" title="定义一个队列类"></a>定义一个队列类</h2><p>类似创建栈，创建队列也是使用构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 这里是属性和方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存放数据也是使用一个数组<code>var items = []</code>。</p><h2 id="完整的基本代码"><a href="#完整的基本代码" class="headerlink" title="完整的基本代码"></a>完整的基本代码</h2><p>直接上基本的完整代码和相关的代码注释：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储数据的结构</span></span><br><span class="line"><span class="keyword">var</span> items = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队，相当于入栈</span></span><br><span class="line"><span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">items.push(element);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队，相当于出栈</span></span><br><span class="line"><span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> item.shift();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队首，队列的第一个元素</span></span><br><span class="line"><span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队尾，队列的最后一个元素</span></span><br><span class="line"><span class="keyword">this</span>.end = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items[items.length - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查队列是否是空的队列</span></span><br><span class="line"><span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.length == <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将队列置空</span></span><br><span class="line"><span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">items = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列的长度</span></span><br><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.lenght;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示/打印队列信息</span></span><br><span class="line"><span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(items.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本的代码跟之前的<a href="http://reng99.cc/2018/06/16/algorithm-stack/">栈</a>的代码是大同小异，更多的代码请查看<a href="https://github.com/reng99/algorithm" target="_blank" rel="noopener">https://github.com/reng99/algorithm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/algorithm/queue/queue_banner.jpg&quot; alt=&quot;algorithm/queue/queue_banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;队列是遵循FIFO（First In First Out，先进先出，也称为先来先服务）原则的一组有序的项。队列在队尾添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://reng99.cc/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="队列" scheme="http://reng99.cc/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="http://reng99.cc/2018/06/16/algorithm-stack/"/>
    <id>http://reng99.cc/2018/06/16/algorithm-stack/</id>
    <published>2018-06-16T04:20:52.000Z</published>
    <updated>2018-06-17T04:58:10.221Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omu538iq8.bkt.clouddn.com/algorithm/stack/stack_banner.jpg" alt="algorithm/stack/stack_banner"></p><p>栈是一种遵从后进先出(LIFO)原则的有序集合。新添加的或待删除的元素都保留在栈的末尾，称为栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都靠近栈底。</p><a id="more"></a><h2 id="定义一个栈类"><a href="#定义一个栈类" class="headerlink" title="定义一个栈类"></a>定义一个栈类</h2><p>使用构造函数来定义一个栈类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 各种属性和方法的声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里定义的存放的数据结构是数组。<code>var item = []</code>。</p><h2 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h2><p>数组本身就有方法push进来一个内容，这里也是使用这个方法，我们来写一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">items.push(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h2><p>pop也是数组的方法，表示出栈，这里也是使用pop为函数名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>还有方法，比如返回栈顶元素，检查是否是空栈等。这里不展开讲，下面全列出代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义存储的数据结构</span></span><br><span class="line"><span class="keyword">var</span> items = []; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈，返回新的数组</span></span><br><span class="line"><span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">items.push(element); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  出栈，弹出栈顶元素</span></span><br><span class="line"><span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> item.pop();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取栈顶元素</span></span><br><span class="line"><span class="keyword">this</span>.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items[items.length<span class="number">-1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否是空栈</span></span><br><span class="line"><span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.length == <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈元素的个数</span></span><br><span class="line"><span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示栈的元素</span></span><br><span class="line"><span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(items.toString());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多的代码请看<a href="https://github.com/reng99/algorithm" target="_blank" rel="noopener">https://github.com/reng99/algorithm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omu538iq8.bkt.clouddn.com/algorithm/stack/stack_banner.jpg&quot; alt=&quot;algorithm/stack/stack_banner&quot;&gt;&lt;/p&gt;
&lt;p&gt;栈是一种遵从后进先出(LIFO)原则的有序集合。新添加的或待删除的元素都保留在栈的末尾，称为栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都靠近栈底。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://reng99.cc/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="栈" scheme="http://reng99.cc/tags/%E6%A0%88/"/>
    
  </entry>
  
</feed>
